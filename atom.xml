<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Zhan's Blog]]></title>
  <link href="http://swuzjb.github.io/atom.xml" rel="self"/>
  <link href="http://swuzjb.github.io/"/>
  <updated>2017-02-21T16:33:11+08:00</updated>
  <id>http://swuzjb.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[Java容器框架分析（二）——ArrayList源码解析]]></title>
    <link href="http://swuzjb.github.io/14876660718478.html"/>
    <updated>2017-02-21T16:34:31+08:00</updated>
    <id>http://swuzjb.github.io/14876660718478.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">ArrayList简介</h2>

<p>ArrayList实现了List接口，是顺序容器（即元素存放的顺序和加入列表的顺序相同），允许放入<code>null</code>元素，底层通过数组实现。该实现除了没有实现多线程同步之外，其余跟Vector大致相同，即ArrayList是线程不安全的。<br/>
每个ArrayList都一个容量（Capacity）属性，表示底层数组的实际大小，容器内存储元素的个数不大于当前的容量。当向容器中添加元素时，如果容量不足，容器会自动增大底层数组的大小。前面已经提过，Java 泛型只是编译器提供的语法糖，所以这里的数组是一个 Object 数组，以便能够容纳任何类型的对象。<br/>
size(), isEmpty(), get(), set() 方法均能在常数时间内完成，add() 方法的时间开销跟插入位置有关，addAll() 方法的时间开销跟添加元素的个数成正比。其余方法大都是线性时间。<br/>
为追求效率，ArrayList 没有实现同步（synchronized），如果需要多个线程并发访问，用户可以手动同步，也可使用 Vector 替代。<br/>
<img src="media/14876660718478/14876663843643.png" alt=""/></p>

<h2 id="toc_1">常用方法剖析</h2>

<h3 id="toc_2">set(int index, E element)</h3>

<p>set()方法可以直接设定某个下标对应的元素。既然ArrayList的底层是数组实现的，set()方法的实现也就变得极为简单，直接赋值即可，复杂度为<em>O(1)</em>。</p>

<pre><code class="language-java">public E set(int index, E element) {
    rangeCheck(index);//下标越界检查
    E oldValue = elementData(index);
    elementData[index] = element;//赋值到指定位置，复制的仅仅是引用
    return oldValue;
}
</code></pre>

<h3 id="toc_3">get(int index)</h3>

<p>get()方法可以获取指定下标对应的对象，唯一需要注意的是由于底层数组是Object[]，得到元素后需要进行类型转换，复杂度为<em>O(1)</em>。</p>

<pre><code class="language-java">public E get(int index) {
    rangeCheck(index);
    return (E) elementData[index];//注意类型转换
}
</code></pre>

<h3 id="toc_4">add(E element)和add（int index,E element）</h3>

<p>跟C++的vector不同，ArrayList没有push_back()方法，对应的方法是add(E e)，ArrayList也没有insert()方法，对应的方法是add(int index, E e)。这两个方法都是向容器中添加新元素，这可能会导致 capacity 不足，因此在添加元素之前，都需要进行剩余空间检查，如果需要则自动扩容。扩容操作最终是通过grow()方法完成的。</p>

<pre><code class="language-java">private void grow(int minCapacity) {
    int oldCapacity = elementData.length;
    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);//原来的1.5倍
    if (newCapacity - minCapacity &lt; 0)
        newCapacity = minCapacity;
    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)
        newCapacity = hugeCapacity(minCapacity);
    elementData = Arrays.copyOf(elementData, newCapacity);//扩展空间并复制
}
</code></pre>

<p>由于Java GC自动管理了内存，这里也就不需要考虑源数组释放的问题。<br/>
<img src="media/14876660718478/14876673586219.png" alt=""/><br/>
空间的问题解决之后，插入就变得非常简单了。<br/>
<img src="media/14876660718478/14876674357716.png" alt=""/><br/>
<code>add(int index,E e)</code>需要先对元素进行移动，然后完成插入，该方法时间复杂度为<em>O(n)</em>。</p>

<h3 id="toc_5">addAll()</h3>

<p>addAll()方法可以一次添加多个元素，根据插入的起始位置不同也用两个版本：一个是在末尾添加<code>addAll(Collection&lt;? extends E&gt; c)</code>;一个是从指定位置开始插入的<code>addAll(int index, Collection&lt;? extends E&gt; c)</code>方法。对应的实现方式和上述的add方法类似，在插入之前，需要对容量进行判断，如果需要则自动扩容，如果从指定位置插入，还需要先对数组元素进行移动。</p>

<h3 id="toc_6">remove()</h3>

<p>remove方法可以删除列表中的元素，其也有两个版本：一个是<code>remove(int index)</code>删除指定位置的元素；一个是<code>remove(Object o)</code>删除第一个满足<code>o.equals(elementData[index])</code>的元素。删除操作是<code>add()</code>的逆过程，需要将删除点之后的元素向前移动一个位置。需要注意的是为了让GC起作用，必选显示的为最后一个位置赋<code>null</code>值。</p>

<pre><code class="language-java">public E remove(int index) {
    rangeCheck(index);
    modCount++;
    E oldValue = elementData(index);
    int numMoved = size - index - 1;
    if (numMoved &gt; 0)
        System.arraycopy(elementData, index+1, elementData, index, numMoved);
    elementData[--size] = null; //清除该位置的引用，让GC起作用
    return oldValue;
}
</code></pre>

<p>关于Java GC 这里需要特别说明一下，<strong>有了垃圾收集器并不意味着一定不会有内存泄漏</strong>。对象能否被 GC 的依据是是否还有引用指向它，上面代码中如果不手动赋null值，除非对应的位置被其他元素覆盖，否则原来的对象就一直不会被回收。</p>

<h2 id="toc_7">使用技巧</h2>

<p>关于List的容量，可以在一开始就给定一个比较合理的值，避免内存复制所带来的不必要的时间开销。</p>

<h2 id="toc_8">转载声明</h2>

<p>本文转载自：<a href="https://github.com/CarpenterLee/JCFInternals">https://github.com/CarpenterLee/JCFInternals</a><br/>
作者：CarpenterLee</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java容器框架分析（一）——相关概念综述]]></title>
    <link href="http://swuzjb.github.io/14876629153312.html"/>
    <updated>2017-02-21T15:41:55+08:00</updated>
    <id>http://swuzjb.github.io/14876629153312.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">概述</h2>

<p>容器，就是用于容纳其它对象的对象。在Java API中已经实现了很多常用的容器统称为Java Collections Framework（JCF）。JCF起始于JDK 1.2 使用JCF的优点在于：</p>

<ul>
<li>降低编程难度<br/></li>
<li>提高程序性能</li>
<li>提高API之间的互操作性</li>
<li>降低学习难度</li>
<li>降低设计和实现相关API的难度</li>
<li>增强程序的重用性</li>
</ul>

<p>Java容器只能存放对象，对于基础类型（如int、double、float等），需要将其包装成对应的包装类型对象后才能放到容器之中，当然很多情况之下拆包和解包过程可以由虚拟机自动完成。</p>

<h2 id="toc_1">泛型</h2>

<p>Java 容器能够容纳任何类型的对象，这一点表面上是通过泛型机制完成，Java 泛型不是什么神奇的东西，只是编译器为我们提供的一个 “语法糖”，泛型本身并不需要Java虚拟机的支持，只需要在编译阶段做一下简单的字符串替换即可。实质上Java的单继承机制才是保证这一特性的根本，因为所有的对象都是Object的子类，容器里只要能够存放Object对象就行了。<br/>
事实上，所有容器的内部存放的都是Object对象，泛型机制只是简化了编程，由编译器自动帮我们完成了强制类型转换和类型检测而已。JDK 1.4 以及之前版本不支持泛型，类型转换需要程序员显式完成。</p>

<pre><code class="language-java">//JDK 1.4 or before
ArrayList list = new ArrayList();
list.add(new String(&quot;Monday&quot;));
list.add(new String(&quot;Tuesday&quot;));
list.add(new String(&quot;Wensday&quot;));
for(int i = 0; i &lt; list.size(); i++){
    String weekday = (String)list.get(i);//显式类型转换
    System.out.println(weekday.toUpperCase());
}
//JDK 1.5 or latter
ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();//参数化类型
list.add(new String(&quot;Monday&quot;));
list.add(new String(&quot;Tuesday&quot;));
list.add(new String(&quot;Wensday&quot;));
for(int i = 0; i &lt; list.size(); i++){
    String weekday = list.get(i);//隐式类型转换，编译器自动完成
    System.out.println(weekday.toUpperCase());
}
</code></pre>

<h2 id="toc_2">内存管理</h2>

<p>Java不需要程序员来管理内存回收，而是有着一套自动的垃圾回收机制。另外，由于Java里的对象都在堆上，所以容器中放的其实是对象的引用而不是对象本身，这就避免了容器对象的拷贝复制问题。</p>

<h2 id="toc_3">接口与实现</h2>

<h3 id="toc_4">接口</h3>

<p>为了规范容器的行为，统一设计，JCF定义了14种容器接口，他们之间的关系如下图:<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2017-02-21-14876644819118.png" alt=""/><br/>
Map接口并没有继承自Collection接口，因为Map表示的是关联式容器而不是集合，但是Java在Map接口中提供了从Map转化为Collection的方法，可以方便的将Map切换到集合视图。上图中提供了Queue接口，却没有Stack接口，是因为在JDk 1.6之后Stack接口的功能已经被Deque取代。</p>

<h3 id="toc_5">实现</h3>

<p>上述接口的通用实现类见下表：<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2017-02-21-14876650570700.jpg" alt=""/></p>

<h2 id="toc_6">迭代器（Iterator）</h2>

<p>跟C++的STL一样，JCF的迭代器为我们提供了遍历容器中元素的方法，只有容器本身清楚容器里元素的组织方式，因此迭代器只能通过容器本身得到。每个容器都会通过内部类的形式来实现自己的迭代器，相比C++ STL的迭代器，JCF的迭代器更容易使用。<br/>
实例代码：</p>

<pre><code class="language-java">//通过迭代器来访问容器元素
ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();
list.add(new String(&quot;Monday&quot;));
list.add(new String(&quot;Tuesday&quot;));
list.add(new String(&quot;Wensday&quot;));
//得到迭代器
Iterator&lt;String&gt; it = list.iterator();
while(it.hasNext()){
    String weekday = it.next();//访问元素
    System.out.println(weekday.toUpperCase());
}
//JDK 1.5引入了增强的for循环，简化了迭代容器时的写法。
//使用foreach迭代
ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();
list.add(new String(&quot;Monday&quot;));
list.add(new String(&quot;Tuesday&quot;));
list.add(new String(&quot;Wensday&quot;));
for(String weekday : list){
    System.out.println(weekday.toUpperCase());
}
</code></pre>

<h2 id="toc_7">声明</h2>

<p>本系列博文装载自：<a href="https://github.com/CarpenterLee/JCFInternals">https://github.com/CarpenterLee/JCFInternals</a><br/>
作者：CarpenterLee</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java内存管理]]></title>
    <link href="http://swuzjb.github.io/14875782735365.html"/>
    <updated>2017-02-20T16:11:13+08:00</updated>
    <id>http://swuzjb.github.io/14875782735365.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Java的内存区域</h2>

<p>Java的内存区域按照是否线程共享分为两个区域</p>

<ol>
<li>线程共享区域包括：方法区（Method Area）和堆（Heap）</li>
<li>线程独享的区域包括：虚拟机栈（VM Stack），本地方法栈（Native Method Stack）和程序计数器（Program Counter Register）</li>
</ol>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2017-02-20-14875809468666.jpg" alt=" " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h3 id="toc_1">程序计数器</h3>

<p>程序计数器是一块较小的内存区域，指向当前执行的字节码。如果线程正在执行一个Java方法，这个计数器记录正在执行的虚拟机字节码指令的地址，如果执行的是Native方法，则计数器为空。<br/>
此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError的区域。</p>

<h3 id="toc_2">Java虚拟机栈</h3>

<p>线程私有区域，其生命周期和线程一致。该区域描述的是Java方法执行的内存模型：每个方法在执行的时候都会创建一个栈帧（方法运行时的基本数据结构）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。<br/>
在Java虚拟机规范中，对这个区域规定了两种异常情况：</p>

<ol>
<li>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；</li>
<li>如果虚拟机栈可以动态扩展（当前大部分虚拟机实现都是动态的、但是固定长度的栈也是被允许的）在扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。</li>
</ol>

<h3 id="toc_3">本地方法栈</h3>

<p>与虚拟机栈功能类似，只不过虚拟机栈为虚拟机执行Java方法服务，而本地方法栈则为使用到的Native方法服务。与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError异常和OutOfMemoryError异常。</p>

<h3 id="toc_4">Java堆</h3>

<p>是虚拟机管理内存中最大的一块，被所有线程共享，该区域用于存放对象实例，几乎所有的对象都在改区域分配。Java堆是内存回收的主要区域，也被称为GC堆。从内存回收的角度来看，由于现在的垃圾收集器大都采用分代收集算法，所以还可以将Java堆细分为：新生代和老年代，或继续细分为Eden空间、From Survivor空间、To Survivor空间等。<br/>
根据Java虚拟机规范，Java堆可以处于物理上不连续的空间，只要逻辑上是连续的就行，在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的都是可扩展的（通过<code>-Xmx</code>和<code>-Xms</code>参数控制）。<br/>
如果在堆中没有内存完成实例分配，而堆又无法继续扩展时，抛出OutOfMemoryError异常。</p>

<h3 id="toc_5">方法区</h3>

<p>与Java一样，是各个线程所共享的，用于存储已被虚拟机加载类信息、常亮、静态变量、即时编译器编译后的代码等数据。<br/>
根据Java虚拟机规范的规定，当方法区无法满足内存分配需求时，抛出OutOfMemoryError异常。</p>

<h3 id="toc_6">运行时常量池</h3>

<p>运行时常量池是方法区的一部分，Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面量和符号引用。运行期间可以将新的常量放入常量池中，用得比较多的就是String类的intern()方法，当一个String实例调用intern时，Java查找常量池中是否有相同的Unicode的字符串常量，若有，则返回其引用；若没有，则在常量池中增加一个Unicode等于该实例字符串并返回它的引用。</p>

<h2 id="toc_7">Java堆的内存模型</h2>

<p>内存模型如图所示：<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2017-02-20-14875816888809.jpg" alt=""/></p>

<p>广泛地说，JVM堆内存被分为两部分——年轻代（Young Generation）和老年代（Old Generation）。</p>

<h3 id="toc_8">年轻代</h3>

<p>年轻代是所有新对象产生的地方。当年轻代内存空间被用完时，就会触发垃圾回收。这个垃圾回收叫做Minor GC。年轻代被分为3个部分——Eden区和2个Survivor区。</p>

<h4 id="toc_9">年轻代的空间要点</h4>

<ul>
<li>大多数新建对象都位于Eden区；</li>
<li>当Eden区域被填满时，就会触发Minor GC，并把所有存活下来的对象复制到其中一个survivor区域；</li>
<li>Minor GC同样会检查存活下来的对象，并把它们转移到另一个Survivor区域，这样在一段时间内，总有一个空的Survivor区；</li>
<li>经过多次GC周期后，仍然存活下来的对象会被转移到年老代空间，通常这是在年轻代有资格提升到老年代前通过年龄阈值来完成的。</li>
</ul>

<h3 id="toc_10">年老代</h3>

<p>年老代内存里包含了长期存活的对象和经过多次Minor后依然存活下来的对象。年老代在空间不足时，将触发Major GC，将会花费更多时间进行垃圾收集。</p>

<h2 id="toc_11">垃圾回收</h2>

<h3 id="toc_12">如何确定垃圾对象</h3>

<p>Java堆当中几乎储存了所有的对象实例，要想实现自动的垃圾回收，知道哪些对象是‘垃圾’就十分必要了。目前，比较流行的自动垃圾回收，都是基于两个思路实现的。</p>

<h4 id="toc_13">引用计数法</h4>

<p>引用计数法实现简单，效率较高，在大部分情况下是一个不错的算法。其原理是：给对象添加一个引用计数器，每当有一个地方引用该对象时，计数器加1，当引用失效时，计数器减1，当计数器值为0时表示该对象不再被使用。需要注意的是：引用计数法很难解决对象之间相互循环引用的问题，主流Java虚拟机没有选用引用计数法来管理内存。</p>

<h4 id="toc_14">可达性分析法</h4>

<p>Java虚拟机使用可达性分析法来进行对象的可用性判断。这个算法的基本思路就是通过一系列的称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连（用图论的话来说，就是从GC Roots到这个对象不可达）时，则证明此对象是不可用的。如图所示，对象object 5、object 6、object 7虽然互相有关联，但是它们到GC Roots是不可达的，所以它们将会被判定为是可回收的对象。<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2017-02-20-14875947879603.jpg" alt=" " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h5 id="toc_15">Java中的GC ROOT</h5>

<ul>
<li>虚拟机栈中的引用对象</li>
<li>方法区中的静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>本地方法栈中本地方法引用的对象</li>
</ul>

<h5 id="toc_16">对象的救赎</h5>

<p>在可达性分析中不可用的对象并不是立刻被虚拟机销毁，而是被标记为待回收，要真正的宣告一个对象死亡，至少需要经历两次标记：如果对象在可达性分析后发现没有与GC ROOT相连的引用链，那么他会被第一次被标记并进行一次筛选，筛选是判断此对象是否有必要执行finalize()方法，当对象没有覆盖Object类的finalize()方法或该类的finalize（）方法已经被虚拟机调用过，虚拟机将视为没有必要执行，对象会被销毁。反之，将会将该对象加入一个优先级非常低的队列中等待执行finalize()方法，但不保证等待其执行完，这是对象进行自我救赎的最后也是唯一的机会。</p>

<h3 id="toc_17">典型的垃圾回收算法</h3>

<h4 id="toc_18">标记-清楚（Mark-Sweep）算法</h4>

<p>这是最基础的垃圾回收算法，标记-清楚算法顾名思义，分为两个阶段，标记和删除。标记阶段的任务是标记出那些对象需要被回收（即我们上面说的不可达或不可用对象），清楚阶段就是回收（释放）被标记对象所占用的内存空间。具体样例如下图：<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2017-02-20-14875956126004.jpg" alt=" " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>通过观察图片我们可以非常轻松的发现，标记-清楚算法虽然非常简单，但是有一个比较严重的问题，那就是非常容易产生大量的内存碎片，碎片的数量一旦过多就会导致在后续为大对象分配内存空间时午饭找到足够的内存空间而提前出发新一轮的垃圾收集严重时会导致内存溢出。</p>

<h4 id="toc_19">复制（Copying）算法</h4>

<p>为了解决标记-清楚算法的缺陷，复制算法应运而生。复制算法的思路是，将可用内存按容量划分为大小相同的两块，每次创建对象时只使用其中的一块儿。当这一块儿内存用完时，就触发垃圾回收，将还存活的对象复制到另外一块儿内存空间之上，再把已经使用的内存空间一次释放掉，这样一来就不会出现内存碎片的问题了。操做实例如图：<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2017-02-20-14875960340164.jpg" alt=" " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>复制算法虽然实现简单，运行效率高而且也不会出现内存碎片，但是对内存空间的使用却付出了高昂的代价，可用内存缩减为了原先的一半。同时复制算法的效率和存活对象数目的多少直接相关，若存活对象数量较多，效率就会大大的降低。</p>

<h4 id="toc_20">标记整理算法</h4>

<p>为了解决上面两种算法的缺陷，提出了标记整理（Mark-Compact）算法。该算法在标记阶段和标记清理算法完全一致，但是在完成标记之后，不是直接清理可回收对象，而是将存活的对象都向内存一段移动，然后清理端边界以外的内存，具体过程如下图：<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2017-02-20-14875963334710.jpg" alt=" " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h4 id="toc_21">分代收集算法</h4>

<p>分代收集算法是目前大部分JVM的垃圾收集器采用的算法。它的核心思想是根据对象存活的生命周期将内存划分为若干个不同的区域。一般情况下将堆区划分为老年代（Tenured Generation）和新生代（Young Generation），老年代的特点是每次垃圾收集时只有少量对象需要被回收，而新生代的特点是每次垃圾回收时都有大量的对象需要被回收，那么就可以根据不同代的特点采取最适合的收集算法。<br/>
目前大部分垃圾收集器对于新生代都采取Copying算法，因为新生代中每次垃圾回收都要回收大部分对象，也就是说需要复制的操作次数较少，但是实际中并不是按照1：1的比例来划分新生代的空间的，一般来说是将新生代划分为一块较大的Eden空间和两块较小的Survivor空间（一般为8:1:1），每次使用Eden空间和其中的一块Survivor空间，当进行回收时，将Eden和Survivor中还存活的对象复制到另一块Survivor空间中，然后清理掉Eden和刚才使用过的Survivor空间。<br/>
而由于老年代的特点是每次回收都只回收少量对象，一般使用的是Mark-Compact算法。</p>

<h2 id="toc_22">Java堆的配置参数</h2>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2017-02-20-14875967441636.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h2 id="toc_23">Java中的引用</h2>

<p>无论是通过引用计数算法判断对象的引用数量，还是通过可达性分析算法判断对象的引用链是否可达，判定对象是否存活都与“引用”有关。<br/>
在JDK 1.2以前，Java中的引用的定义很传统：如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块内存代表着一个引用。<br/>
在JDK 1.2之后，Java对引用的概念进行了扩充，提出了四种不同的引用。</p>

<h3 id="toc_24">强引用</h3>

<p>就是指在程序代码之中普遍存在的，类似“Object obj = new Object()”这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。</p>

<h3 id="toc_25">软引用</h3>

<p>是用来描述一些还有用但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。在JDK 1.2之后，提供了SoftReference类来实现软引用。</p>

<h3 id="toc_26">弱引用</h3>

<p>也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK 1.2之后，提供了WeakReference类来实现弱引用。</p>

<h3 id="toc_27">虚引用</h3>

<p>也称为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2之后，提供了PhantomReference类来实现虚引用。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTPS技术简要介绍]]></title>
    <link href="http://swuzjb.github.io/14814626217350.html"/>
    <updated>2016-12-11T21:23:41+08:00</updated>
    <id>http://swuzjb.github.io/14814626217350.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">背景</h2>

<p>随着互联网技术应用的广泛应用，越来越多的信息在网络上被交换和利用，网络信息安全也就成为了一个被关注的热点。我们当前的互联网服务多数是基于HTTP协议之上进行开发设计，但是由于HTTP的设计缺陷，信息数据在传输过程中有极大的泄露风险，HTTPS技术也应运而生。<br/>
近日，各大互联网公司纷纷宣布旗下服务必须强制使用HTTPS技术进行网络通讯。如2017年1月1日苹果iOS应用推行ATS安全标准，将强制使用HTTPS安全连接；谷歌Chrome将把所有的HTTP网站标记为「不安全」；在国内热火朝天的小程序也要求必须使用HTTPS请求等。<br/>
本文将对HTTPS的定义、工作原理、使用、与HTTP的不同等方面对HTTPS技术进行简要的介绍。</p>

<h2 id="toc_1">HTTS工作原理</h2>

<h3 id="toc_2">HTTP在安全方面的缺陷</h3>

<p>HTTP本身是明文传输的，没有经过任何安全处理。例如用户在百度搜索了一个关键字，比如“苹果手机”，中间者完全能够查到到这个信息，并且有可能打电话过来骚扰用户。也有一些用户投诉使用百度时，发现首页或者结果页浮了一个很长很大的广告，这也肯定是中间者往页面插的广告内容。如果劫持技术比较低劣的话，用户甚至无法访问百度。<br/>
这里提到的一些中间者主要指一些网络节点，使用户数据在浏览器和百度服务器之间传输必须要经过的节点，比如WIFI热点、路由器、防火墙、反向代理、缓存服务器等。<br/>
在HTTP协议下，中间者可以随意嗅探用户搜索内容，窃取隐私甚至篡改网页。不过HTTPS是这些劫持行为的克星，能够完全有效地防御。总体来说，HTTPS协议提供了三个强大的功能来对抗上述的劫持行为：</p>

<ol>
<li>内容加密。浏览器到百度服务器的内容都是以加密形式传输的，中间者无法直接查看原始内容</li>
<li>身份认证。保证用户访问的是百度服务，即使被DNS劫持到了第三方站点，也会提醒用户没有访问百度服务</li>
<li>数据完整。防止内容被第三方冒充或篡改</li>
</ol>

<h3 id="toc_3">HTTPS的定义</h3>

<p>HTTPS（Hypertext Transfer Protocol Secure，超文本传输安全协议）是一种网络安全传输协议。在计算机网络上，HTTPS经由超文本传输协议进行通信，但利用SSL/TLS来对数据包进行加密。HTTPS开发的主要目的，是提供对网络服务器的身份认证，保护交换数据的隐私与完整性。简单而言HTTPS就是在HTTP协议发送数据的过程中使用SSL协议对数据进行加密，从而保证数据的安全。<br/>
SSL目前的版本是3.0，被IETF（Internet Engineering Task Force）定义在RFC 6101中，之后IETF对SSL 3.0进行了升级，于是出现了TLS（Transport Layer Security）1.0，定义在RFC 2246。实际上我们现在的HTTPS都是用的TLS协议，但是由于SSL出现的时间比较早，并且依旧被现在浏览器所支持，因此SSL依然是HTTPS的代名词，但无论是TLS还是SSL都是上个世纪的事情，SSL最后一个版本是3.0，今后TLS将会继承SSL优良血统继续为我们进行加密服务。目前TLS的版本是1.2，定义在RFC 5246中，暂时还没有被广泛的使用。<br/>
<img src="media/14814626217350/14814628384569.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h3 id="toc_4">TLS/SSL工作原理</h3>

<p>HTTPS 协议的主要功能基本都依赖于 TLS/SSL 协议，本节分析安全协议的实现原理。<br/>
TLS/SSL 的功能实现主要依赖于三类基本算法：散列函数 Hash、对称加密和非对称加密，其利用非对称加密实现身份认证和密钥协商，对称加密算法采用协商的密钥对数据加密，基于散列函数验证信息的完整性。<br/>
<img src="media/14814626217350/14814628187370.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>散列函数Hash，常见的有MD5、SHA1、SHA256，该类函数特点是函数单向不可逆、对输入非常敏感、输出长度固定，针对数据的任何修改都会改变散列函数的结果，用于防止信息篡改并验证数据的完整性;对称加密，常见的有 AES-CBC、DES、3DES、AES-GCM等，相同的密钥可以用于信息的加密和解密，掌握密钥才能获取信息，能够防止信息窃听，通信方式是1对1;非对称加密，即常见的 RSA 算法，还包括 ECC、DH 等算法，算法特点是，密钥成对出现，一般称为公钥(公开)和私钥(保密)，公钥加密的信息只能私钥解开，私钥加密的信息只能公钥解开。因此掌握公钥的不同客户端之间不能互相解密信息，只能和掌握私钥的服务器进行加密通信，服务器可以实现1对多的通信，客户端也可以用来验证掌握私钥的服务器身份。<br/>
在信息传输过程中，散列函数不能单独实现信息防篡改，因为明文传输，中间人可以修改信息之后重新计算信息摘要，因此需要对传输的信息以及信息摘要进行加密;对称加密的优势是信息传输1对1，需要共享相同的密码，密码的安全是保证信息安全的基础，服务器和N个客户端通信，需要维持N个密码记录，且缺少修改密码的机制;非对称加密的特点是信息传输1对多，服务器只需要维持一个私钥就能够和多个客户端进行加密通信，但服务器发出的信息能够被所有的客户端解密，且该算法的计算复杂，加密速度慢。<br/>
结合三类算法的特点，TLS的基本工作方式是，客户端使用非对称加密与服务器进行通信，实现身份验证并协商对称加密使用的密钥，然后对称加密算法采用协商密钥对信息以及信息摘要进行加密通信，不同的节点之间采用的对称密钥不同，从而可以保证信息只能通信双方获取。</p>

<h3 id="toc_5">HTTPS的工作原理</h3>

<p>HTTPS其实是有两部分组成：HTTP + SSL/TLS，也就是在HTTP上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过TLS进行加密，所以传输的数据都是加密后的数据。请求流程如图所示：<br/>
<img src="media/14814626217350/14814628698302.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<ol>
<li><p>客户端发起HTTPS请求<br/>
与HTTP发送请求类似，用户在浏览器或者通过其他方式请求一个HTTPS连接如（<a href="https://www.baidu.com">https://www.baidu.com</a>），然后连接到服务器的443端口。在此过程中客户端会发送一个密文族给服务器，密文族是浏览器所支持的加密算法的清单。</p></li>
<li><p>服务器配置<br/>
采用HTTPS协议的服务器必须要有一套数字证书，该证书可以自己制作，也可以向组织申请。区别就是自己制作的证书需要客户端验证通过才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面。<br/>
证书其实就是一对公钥和私钥，可以这么理解，公钥就是一把锁头，私钥就是这把锁的钥匙，锁头可以给别人对某个东西进行加锁，但是加锁完毕之后，只有持有这把锁的钥匙才可以解锁看到加锁的内容。<br/>
前面说过客户端会传送密文族给服务端，服务端则会从这些密文族中，挑选出一个，比如百度采用的就是RSA公钥加密算法来区分证书签名和交换密钥，通过AES算法来加密数据，至于GCM则是用来校验信息的。</p></li>
<li><p>传送证书<br/>
证书将在接收到客户端请求后由服务器端发送到客户端。该证书包含了公钥、证书的颁发机构、过期时间等重要信息。</p></li>
<li><p>客户端解析证书<br/>
这部分工作是由客户端的TLS来完成的，首先会验证公钥是否有效，如颁发机构、过期时间等等，如果发现异常则会弹出一个警告框，提示证书存在问题。如果证书没有问题，那么就生成一个随机值，然后用证书对该随机值进行加密。<br/>
注意一下上面提到的“发现异常”。证书中会包含数字签名，该数字签名是加密过的，是用颁发机构的私钥对本证书的公钥、名称及其他信息做hash散列加密而生成的。客户端浏览器会首先找到该证书的根证书颁发机构，如果有，则用该根证书的公钥解密服务器下发的证书，如果不能正常解密，则就是“发现异常”，说明该证书是伪造的。</p></li>
<li><p>传送加密信息<br/>
这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，然后客户端和服务端的通信就可以通过这个随机值生成对称加密的秘钥来进行加密和解密了。</p></li>
<li><p>服务端解密信息<br/>
服务端用私钥解密后，得到了客户端传过来的随机值，至此一个非对称加密的过程结束，至此TLS利用非对称加密实现了身份认证和密钥协商。然后把内容通过该值进行对称加密。</p></li>
<li><p>传输加密后的信息<br/>
当对称加密秘钥生成完成之后，服务器和客户端之间的信息通信将被该秘钥进行加密。加密后进行正常的HTTP的信息发送，该信息可在客户端被揭秘还原。</p></li>
<li><p>客户端解密信息<br/>
客户端用之前生成的随机值解密服务端传送过来的信息，于是获取了解密后的内容，至此一个对称加密的过程结束，看到对称加密是用于对服务器待传送给客户端的数据进行加密用的。整个过程即使第三方监听了数据，也束手无策。</p></li>
</ol>

<h2 id="toc_6">HTTPS的使用</h2>

<h3 id="toc_7">SSL证书类型</h3>

<p>通常来说，SSL证书分为三大类，他们的安全性是递增的，当然价格和安全系数成正比。</p>

<ol>
<li>DV（Domain Validation Certificate）。DV证书适合个人网站使用，申请证书时，CA只验证域名信息。几分钟之内就能签发。</li>
<li>OV（Organization Validation Certificate）。OV证书需要认证公司的信息。1-2天签发。</li>
<li>EV（Extended Validation Certificate）。EV证书的认证最为严格，一般会要求提供纸质材料。签发时间也较久。
<img src="media/14814626217350/14814632071178.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></li>
</ol>

<h3 id="toc_8">SSL证书供应商简单对比</h3>

<p>Let&#39;s Encrypt是国外一个公共的免费SSL项目，由Linux基金会托管，由Mozilla、思科、Akamai、IdenTrust和EFF等组织发起，目的就是向网站自动签发和管理免费证书，以便加速互联网由HTTP过渡到HTTPS。<br/>
StartSSL是StartCom公司旗下的SSL证书，应该算是免费SSL证书中的鼻祖，最早提供完全免费的SSL证书并且被各大浏览器所支持的恐怕就只有 StartSSL证书了。首次申请StartSSL免费SSL证书是免费一年，但是你可以在第二年继续续期。<br/>
七牛免费SSL，七牛最近和亚洲诚信合作推了赛门铁克Symantec签发的DV证书。</p>

<h4 id="toc_9">对比结果：</h4>

<ol>
<li>申请便利性：StartSSL和七牛的申请起来都相对便利，Let&#39;s Encrypt对环境要求比较多。</li>
<li>有效期：StartSSL和七牛都是一年，Let&#39;s Encrypt 90天。</li>
<li>证书兼容性：StartSSL 的一年免费 DV SSL 已经被 Chrome、Mozilla 封杀。要慎重选择。Let&#39;s Encrypt总体来说兼容性还不错，不过肯定是赛门铁克的兼容性最好。</li>
<li>售后：免费证书其实基本都没啥售后可言，Let&#39;s Encrypt 基本上只能求助于社区，StartSSL和七牛都有官方客服可以咨询，七牛对中文服务的支持更好。</li>
</ol>

<h3 id="toc_10">七牛免费证书的申请和使用</h3>

<ol>
<li><p>在个人面板-&gt;证书管理申请证书<br/>
<img src="media/14814626217350/14814632233597.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>申请完证书后跳转到证书列表而不是订单列表，具体设置要在订单列表中完成。<br/>
<img src="media/14814626217350/14814632320729.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>DNS验证</p>

<ol>
<li> 记录类型选择 CNAME</li>
<li><p>主机记录填写 cnamekey，点击复制 Key 是复制全部字段（注：万网和DNSpod平台cnamekey不需要主域名部分），见下图<br/>
<img src="media/14814626217350/14814632427561.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>记录值填写cnamevalue，复制全部字段，见图<br/>
<img src="media/14814626217350/14814632609686.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>其他选项默认即可，见图<br/>
<img src="media/14814626217350/14814632750932.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>CName Key 的 DNS 解析指向 CName Value 操作完成后，系统会循环自动检测验证，最长不超过24小时，您可以用 dig 命令来自我检测下DNS解析是否配置成功，见图<br/>
<img src="media/14814626217350/14814632882974.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
</ol></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hadoop搭建实例]]></title>
    <link href="http://swuzjb.github.io/14786108252793.html"/>
    <updated>2016-11-08T21:13:45+08:00</updated>
    <id>http://swuzjb.github.io/14786108252793.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>本次课程要求自主搭建Hadoop集群环境，并进行MapReduce作业操作<br/>
本文以统计知乎用户地域分布情况为例进行统计展示</p>
</blockquote>

<h2 id="toc_0">数据获取与格式说明</h2>

<h3 id="toc_1">数据获取</h3>

<p>实验数据采用爬虫方式从知乎进行爬取，并保存进入数据库，总数据量3383054条。为了后续处理方便，我们将数据从数据库中倒成csv文件进行存储。<br/>
数据爬取代码：<a href="https://github.com/wycm/mycrawler">知乎爬虫</a></p>

<h3 id="toc_2">数据格式</h3>

<p>导出的数据格式为：<code>id,name,headline,gender,school,major,address,industry,company,job</code><br/>
<img src="media/14786108252793/14786149854526.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h2 id="toc_3">Hadoop集群搭建</h2>

<p>Hadoop是一个由Apache基金会所开发的分布式系统基础架构。用户可以在不了解分布式底层细节的情况下，开发分布式程序。充分利用集群的威力进行高速运算和存储。<br/>
本次课程实例基于ubuntu12.04、jdk1.8.111、hadoop2.7.3进行说明，其中ubuntu服务器以虚拟机的形式搭建。</p>

<ol>
<li><p>ubuntu虚拟机搭建</p>

<p>虚拟机创建的步骤在本文中不加以介绍，如有需要请自行百度。ps.为了简便操作，我们可以先创建并配置一台虚拟机然后进行克隆。为了简便操作，可以使用<code>sudo apt-get install ubuntu-desktop</code>安装ubuntu的图形操作界面。</p></li>
<li><p>建立软件目录</p>

<p>为了后续更好的管理我们按照的软件。我们使用mkdir命令，建立软件的安装目录。命令：<code>sudo mkdir /usr/soft</code></p></li>
<li><p>jdk的安装与环境变量设置</p>

<ol>
<li>首先我们从Oracle的官网上下载jdk的压缩文件。下载地址：<a href="http://download.oracle.com/otn-pub/java/jdk/8u111-b14/jdk-8u111-linux-x64.tar.gz">jdk</a>;</li>
<li>使用<code>tar -xzvf 文件名</code>对安装包进行解压;</li>
<li>将解压后的文件夹移至上一步我们建立的软件安装目录。<code>mv jdk1.8.0_111/ /usr/soft</code></li>
<li><p>设置java所需要的环境变量:</p>

<ol>
<li>打开配置文件 <code>sudo vi /etc/profile</code>；</li>
<li>在配置文件中加入<code>export JAVA_HOME=&quot;/usr/soft/jdk1.8.0_111&quot;</code>；</li>
<li>在配置文件中加入<code>export PATH=&quot;$PATH:$JAVA_HOME/bin&quot;</code>；</li>
<li>保存配置文件退出；</li>
<li>使用source命令让配置文件生效，<code>source /etc/profile</code></li>
</ol></li>
<li><p>调用<code>javac -version</code>命令，检查配置是否生效,安装是否成功。</p></li>
</ol></li>
<li><p>Hadoop的安装与环境变量设置</p>

<ol>
<li>从Apache Hadoop网站上下载对应的Hadoop安装包。下载地址：<a href="http://mirrors.cnnic.cn/apache/hadoop/common/hadoop-2.7.3/hadoop-2.7.3.tar.gz">Hadoop2.7.3</a>；</li>
<li>使用<code>tar -xzvf 文件名</code>对安装包进行解压;</li>
<li>将解压后的文件夹移至上一步我们建立的软件安装目录。<code>mv Hadoop-2.7.3 /usr/soft</code></li>
<li>打开配置文件 <code>sudo vi /etc/profile</code>；</li>
<li>在配置文件中加入<code>export PATH=&quot;$PATH:$JAVA_HOME/bin:/usr/soft/hadoop-2.7.3/bin:/usr/soft/hadoop-2.7.3/sbin&quot;</code>；</li>
<li>保存配置文件退出；</li>
<li>使用source命令让配置文件生效，<code>source /etc/profile</code></li>
<li>调用<code>Hadoop version</code>命令，检查配置是否生效,安装是否成功。</li>
</ol></li>
<li><p>SSH免密码登录配置</p>

<ol>
<li>使用<code>sudo apt-get install ssh</code>安装完整的ssh客户端；</li>
<li>使用<code>ssh-keygen -t rsa -P &#39;&#39; -f ~/.ssh/id_rsa</code>生成公私钥；</li>
<li>使用<code>cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code>将公钥复制；</li>
<li>使用<code>ssh localhost</code>命令检验是否可以免密码登录系统。</li>
</ol></li>
<li><p>修改服务器的名称</p>

<ol>
<li>使用<code>sudo vi /etc/hostname</code>,修改服务器的名称</li>
<li>重启服务器使配置生效</li>
</ol></li>
<li><p>配置Hadoop配置文件</p>

<p>Hadoop的配置文件位于其安装目录下的etc/hadoop/目录下</p>

<ol>
<li><p>修改yarn-site.xml，内容如下（master代表主服务器名）：</p>

<pre><code class="language-xml">&lt;configuration&gt;
    &lt;property&gt;
        &lt;name&gt;fs.defaultFS&lt;/name&gt;
        &lt;value&gt;hdfs://master/&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;
        &lt;value&gt;~/hadoop/data&lt;/value&gt;
    &lt;/property&gt;
&lt;/configuration&gt;
</code></pre></li>
<li><p>修改hdfs-site.xml，内容如下:</p>

<pre><code class="language-xml">&lt;configuration&gt;
    &lt;property&gt;
        &lt;name&gt;dfs.replication&lt;/name&gt;
        &lt;value&gt;3&lt;/value&gt;
    &lt;/property&gt;
&lt;/configuration&gt;
</code></pre></li>
<li><p>修改mapred-site.xml（此文件需要从mapred-site.xml.template复制），内容如下：</p>

<pre><code class="language-xml">&lt;configuration&gt;
    &lt;property&gt;
        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;
        &lt;value&gt;yarn&lt;/value&gt;
    &lt;/property&gt;
&lt;/configuration&gt;
</code></pre></li>
<li><p>修改yarn-site.xml,内容如下：</p>

<pre><code class="language-xml">&lt;configuration&gt;
    &lt;property&gt;
        &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;
        &lt;value&gt;master&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;
        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
        &lt;name&gt;yarn.resourcemanager.address&lt;/name&gt;
        &lt;value&gt;master:8032&lt;/value&gt;
    &lt;/property&gt;
    &lt;property&gt;
        &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt;
        &lt;value&gt;master:8030&lt;/value&gt;
    &lt;/property&gt;
&lt;/configuration&gt;
</code></pre></li>
<li><p>修改slaves文件，将附属机主机名添加入内，每行一个，样例为:</p>

<pre><code class="language-xml">s1
s3
</code></pre></li>
</ol></li>
<li><p>克隆宿主机，配置hosts文件</p>

<ol>
<li>使用VM的克隆功能，克隆虚拟机，并依次修改主机名</li>
<li><p>根据实际IP修改各个机器的hosts文件，ip查看可以使用<code>ifconfig</code>命令，样例如下：</p>

<pre><code>127.0.0.1  localhost    
10.104.234.203  master
182.254.216.245 s1
123.207.252.11 s2
123.207.24.98 s3
</code></pre></li>
</ol></li>
<li><p>格式化HDFS文件系统，执行<code>hdfs namenode -format</code>命令，对HDFS进行格式化。</p></li>
<li><p>启动Hadoop集群</p>

<ol>
<li>启动文件系统,<code>start-dfs.sh</code>;</li>
<li>启动yarn，<code>start-yarn.sh</code>;</li>
<li>可以使用<code>jps</code>命令，检查各个服务的启动情况</li>
</ol></li>
</ol>

<h2 id="toc_4">统计程序的编写与运行</h2>

<p>本次实验所用的MapReduce程序采用Maven的方式进行构建，具体操作可以参考文章：<a href="http://www.cnblogs.com/Leo_wl/p/4862820.html">Maven构建Hadoop工程</a></p>

<ol>
<li><p>编写Mapper类，本次我们实现的功能从原理上与Hadoop自带的WordCount实验非常相似。</p>

<pre><code class="language-java">package com.swu.count;

import java.io.IOException;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

public class CountMapper extends Mapper&lt;Object, Text, Text, IntWritable&gt; {

    private final static IntWritable one = new IntWritable(1);
    private Text word = new Text();

    @Override
    protected void map(Object key, Text value, Mapper&lt;Object, Text, Text, IntWritable&gt;.Context context)
            throws IOException, InterruptedException {
        // 获取每一行数据，并以逗号为基准进行分割
        String[] data = value.toString().split(&quot;,&quot;);
        // 设置word的key为地址信息
        word.set(data[5]);
        // 设置value为1
        context.write(word, one);
    }

}
</code></pre></li>
<li><p>编写Reducer类。</p>

<pre><code class="language-java">package com.swu.count;

import java.io.IOException;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;

public class CountReduce extends Reducer&lt;Text, IntWritable, Text, IntWritable&gt; {
    private IntWritable result = new IntWritable();
    private Text keyEx = new Text();

    @Override
    protected void reduce(Text key, Iterable&lt;IntWritable&gt; values,
            Reducer&lt;Text, IntWritable, Text, IntWritable&gt;.Context context) throws IOException, InterruptedException {
        int sum = 0;
        // 遍历value相加
        for (IntWritable val : values) {
            sum += val.get();
        }
        // 返回新的key-value
        result.set(sum);
        keyEx.set(key);
        context.write(keyEx, result);
    }
}
</code></pre></li>
<li><p>编写Comparator类，用于第二次作业的排序。</p>

<pre><code class="language-java">package com.swu.count;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.WritableComparable;

public class CountComparator extends IntWritable.Comparator {

    @Override
    public int compare(byte[] b1, int s1, int l1, byte[] b2, int s2, int l2) {
        // TODO Auto-generated method stub
        return -super.compare(b1, s1, l1, b2, s2, l2);
    }
    public int compare(WritableComparable a, WritableComparable b) {
        // TODO Auto-generated method stub
        return -super.compare(a, b);
    }
}
</code></pre></li>
<li><p>编写主方法。</p>

<pre><code class="language-java">package com.swu.count;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;
import java.util.Random;

import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
import org.apache.hadoop.mapreduce.lib.map.InverseMapper;

public class Main {
    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();
        if (otherArgs.length != 2) {
            System.err.println(&quot;Usage: zhihuCount &lt;in&gt; &lt;out&gt;&quot;);
            System.exit(2);
        }
        Path tempDir = new Path(&quot;wordcount-temp-&quot; + Integer.toString(new Random().nextInt(Integer.MAX_VALUE))); // 定义一个临时目录

        Job job = new Job(conf, &quot;zhihuCount&quot;);
        job.setJarByClass(Main.class);
        try {
            job.setMapperClass(CountMapper.class);
            job.setCombinerClass(CountReduce.class);
            job.setReducerClass(CountReduce.class);

            job.setOutputKeyClass(Text.class);
            job.setOutputValueClass(IntWritable.class);

            FileInputFormat.addInputPath(job, new Path(otherArgs[0]));
            FileOutputFormat.setOutputPath(job, tempDir);
            // 先将词频统计任务的输出结果写到临时目录中,下一个排序任务以临时目录为输入目录。
            job.setOutputFormatClass(SequenceFileOutputFormat.class);
            if (job.waitForCompletion(true)) {
                Job sortJob = new Job(conf, &quot;sort&quot;);
                sortJob.setJarByClass(Main.class);
                FileInputFormat.addInputPath(sortJob, tempDir);
                sortJob.setInputFormatClass(SequenceFileInputFormat.class);

                /* InverseMapper由hadoop库提供，作用是实现map()之后的数据对的key和value交换 */
                sortJob.setMapperClass(InverseMapper.class);
                /* 将 Reducer 的个数限定为1, 最终输出的结果文件就是一个。 */
                sortJob.setNumReduceTasks(1);
                FileOutputFormat.setOutputPath(sortJob, new Path(otherArgs[1]));

                sortJob.setOutputKeyClass(IntWritable.class);
                sortJob.setOutputValueClass(Text.class);
                /*
                 * Hadoop 默认对 IntWritable 按升序排序，而我们需要的是按降序排列。 因此我们实现了一个
                 * IntWritableDecreasingComparator 类, 并指定使用这个自定义的 Comparator
                 * 类对输出结果中的 key (词频)进行排序
                 */
                sortJob.setSortComparatorClass(CountComparator.class);

                System.exit(sortJob.waitForCompletion(true) ? 0 : 1);
            }
        } finally {
            FileSystem.get(conf).deleteOnExit(tempDir);
        }
    }
}
</code></pre></li>
<li><p>将写好的程序编译为jar包(注意指定Main方法)，上传至服务器。</p></li>
<li><p>执行<code>hadoop jar XXX.jar /inputFile /outputFile</code>，执行作业。</p></li>
</ol>

<h2 id="toc_5">结果展示与说明</h2>

<p>上述作业结束后，我们就可以通过查询输出文件得到我们的统计结果。本次实验统计结果如下：<br/>
<img src="media/14786108252793/14787497512630.jpg" alt=""/><br/>
输出文件如下：<br/>
<img src="media/14786108252793/14787497741393.jpg" alt=""/></p>

<h2 id="toc_6">相关代码</h2>

<p>本次实验相关代码和所用的数据资料，均已上传至码云仓库（OSChina git）地址为：<a href="https://git.oschina.net/cobber/HadoopPractice">HadoopPractice</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网易Java Web微专业Spring-Web框架单元作业]]></title>
    <link href="http://swuzjb.github.io/14773646522828.html"/>
    <updated>2016-10-25T11:04:12+08:00</updated>
    <id>http://swuzjb.github.io/14773646522828.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>完成包含以下功能的Web工程，提供一个接口，该接口可以根据需要（扩展名，Accep头）返回一个HTML文档或者JSON数据，要求：<br/>
返回的JSON数据是一个用户列表，每个用户包含两个信息：用户Id（userId），用户名（userName），最终的数据类似：<br/>
{&quot;userList&quot; : [<br/>
    {<br/>
        &quot;userId&quot;: 1001,<br/>
        &quot;userName&quot;: &quot;test1&quot;<br/>
    },<br/>
    {<br/>
        &quot;userId&quot;: 1002,<br/>
        &quot;userName&quot;: &quot;test2&quot;<br/>
    }<br/>
    ...<br/>
]}<br/>
2. 返回的HTML文档基于FreeMarker生成，内容是一个用户列表的表格，对HTML表格不熟悉的同学可以参考 <a href="http://www.w3school.com.cn/tiy/t.asp?f=html_tables">http://www.w3school.com.cn/tiy/t.asp?f=html_tables</a> 了解；<br/>
3. 以自己能力为基础，返回的数据可以是接口内直接返回的，也可以是从数据库表里查询出来的（加分）；<br/>
4. 尽可能根据项目模板里介绍的内容组织代码及资源。</p>
</blockquote>

<h2 id="toc_0">项目架构</h2>

<p><img src="media/14773646522828/14773699877029.jpg" alt=" " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h2 id="toc_1">相关概念</h2>

<h3 id="toc_2">SpringMVC</h3>

<p>SpringMVC是Spring自身提供的一套基于MVC设计理念的开发框架，用于替代安全性较低的Sturts框架</p>

<h3 id="toc_3">JSON</h3>

<p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它基于ECMAScript的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C、C++、C#、Java、JavaScript、Perl、Python等）。这些特性使JSON成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成(一般用于提升网络传输速率)。</p>

<h3 id="toc_4">视图解析器</h3>

<p>控制器在选择好适合处理请求的方法时，传入收到的请求(根据方法参数类型，可能以不同的类型传入)，并且 调用该方法中的逻辑来进行处理(也可以是调用Service来真正处理)。方法逻辑可能也会在参数中添加或者删除数据。处理方法处理完之后，会委派给一个 视图，由该视图来处理方法的返回值。处理程序的返回值并不代表视图的具体实现，可以只是String类型，代表视图名，甚至是void(这时候 Spring MVC可以根据方法名或者控制器名找默认视图)。也不需要担心返回值只是视图名称的话，视图拿不到要显示的数据。因为方法参数对于视图来说也是可以拿到 的。比如说，如果处理方法以Map为参数，那么这个Map对于视图也是可以拿到的。<br/>
返回的视图名称会返回给DispatcherServlet，它会根据一个视图解析器将视图名称解析为一个具体的视图实现。这里说到的视图解析器是一个实现了ViewResolver借口的Bean，它的任务就是返回一个视图的具体实现(HTML、jsonp、json等等)。</p>

<h4 id="toc_5">内容协商视图解析器</h4>

<p>可以根据请求的内容，自动匹配对应的视图解析器，对视图进行解析。</p>

<h2 id="toc_6">作业实现</h2>

<p>我们按照模块图有下自上对本次作业实现进行说明。</p>

<ol>
<li><p>User模型</p>

<pre><code class="language-java">package site.zhanjingbo.course.meta;

public class User {
    private int userId;
    private String userName;

    public int getUserId() {
        return userId;
    }

    public void setUserId(int userId) {
        this.userId = userId;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }
}
</code></pre></li>
<li><p>UserDao。User数据库访问接口</p>

<pre><code class="language-java">package site.zhanjingbo.course.dao;
import java.util.List;
import site.zhanjingbo.course.meta.User;
public interface UserDao {
    public List&lt;User&gt; getUserList();
}
</code></pre></li>
<li><p>UserDaoMapper。使用Mybatis对UserDao进行实现。</p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;site.zhanjingbo.course.dao.UserDao&quot;&gt;
    &lt;resultMap type=&quot;User&quot; id=&quot;UserResult&quot;&gt;
        &lt;result property=&quot;userId&quot; column=&quot;userId&quot; /&gt;
        &lt;result property=&quot;userName&quot; column=&quot;userName&quot; /&gt;
    &lt;/resultMap&gt;
    &lt;select id=&quot;getUserList&quot; resultMap=&quot;UserResult&quot;&gt;
        select * from user
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre></li>
<li><p>UserService。User的对应业务逻辑层</p>

<pre><code class="language-java">package site.zhanjingbo.course.service.impl;
import java.util.List;
import javax.annotation.Resource;
import org.springframework.stereotype.Service;
import site.zhanjingbo.course.dao.UserDao;
import site.zhanjingbo.course.meta.User;
import site.zhanjingbo.course.service.UserService;  
@Service
public class UserServiceImpl implements UserService {
    @Resource
    private UserDao userDao;
    public List&lt;User&gt; getUserList() {
        return userDao.getUserList();
    }
}
</code></pre></li>
<li><p>UserController。User的控制器层，调用业务逻辑，返回对应视图名称和数据。</p>

<pre><code class="language-java">package site.zhanjingbo.course.web.controller;

import javax.annotation.Resource;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;
import site.zhanjingbo.course.service.UserService;

@Controller
@RequestMapping(&quot;/user&quot;)
public class UserController {
    @Resource
    private UserService userService;
    @RequestMapping(&quot;/userList&quot;)
    public ModelAndView getUserList() {
        ModelAndView mav = new ModelAndView();
        mav.setViewName(&quot;userList&quot;);
        mav.addObject(&quot;userList&quot;, userService.getUserList());
        return mav;
    }
}
</code></pre></li>
<li><p>userList.ftl。使用FreeMarker渲染的视图文件</p>

<pre><code class="language-html">&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;用户列表&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;table border=&quot;1px&quot;&gt;
          &lt;thead&gt;
            &lt;tr&gt;
              &lt;td&gt;userId&lt;/td&gt;
              &lt;td&gt;userName&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/thead&gt;
          &lt;tbody&gt;
            &lt;#list userList as user&gt; 
                &lt;tr&gt;
                    &lt;td&gt;${user.userId}&lt;/td&gt; 
                    &lt;td&gt;${user.userName}&lt;/td&gt;
                &lt;/tr&gt;
            &lt;/#list&gt;
          &lt;/tbody&gt;  
        &lt;/table&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre></li>
<li><p>DispatcherServlet的配置文件，主要配置对应View的渲染方案，即内容协商视图响应。</p>

<pre><code class="language-xml">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xsi:schemaLocation=&quot;
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/mvc
http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;

&lt;context:component-scan base-package=&quot;site.zhanjingbo.course.web.controller&quot; /&gt;

&lt;bean id=&quot;contentNegotiationManager&quot;
    class=&quot;org.springframework.web.accept.ContentNegotiationManagerFactoryBean&quot;&gt;
    &lt;!-- 扩展名至mimeType的映射,即 /user.json =&gt; application/json --&gt;
    &lt;property name=&quot;favorPathExtension&quot; value=&quot;true&quot; /&gt;
    &lt;!-- 用于开启 /userinfo/123?format=json 的支持 --&gt;
    &lt;property name=&quot;favorParameter&quot; value=&quot;true&quot; /&gt;
    &lt;property name=&quot;parameterName&quot; value=&quot;format&quot; /&gt;
    &lt;!-- 是否忽略Accept Header --&gt;
    &lt;property name=&quot;ignoreAcceptHeader&quot; value=&quot;false&quot; /&gt;
    &lt;property name=&quot;mediaTypes&quot;&gt;
        &lt;map&gt;
            &lt;entry key=&quot;json&quot; value=&quot;application/json&quot; /&gt;
            &lt;entry key=&quot;xml&quot; value=&quot;application/xml&quot; /&gt;
        &lt;/map&gt;
    &lt;/property&gt;
    &lt;!-- 默认的content type --&gt;
    &lt;property name=&quot;defaultContentType&quot; value=&quot;text/html&quot; /&gt;
&lt;/bean&gt;
&lt;!-- freeMarker --&gt;
&lt;bean id=&quot;freemarkerConfig&quot;
    class=&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer&quot;&gt;
    &lt;property name=&quot;templateLoaderPath&quot; value=&quot;/freemarker/&quot; /&gt;
&lt;/bean&gt;
&lt;bean
    class=&quot;org.springframework.web.servlet.view.ContentNegotiatingViewResolver&quot;&gt;
    &lt;property name=&quot;contentNegotiationManager&quot; ref=&quot;contentNegotiationManager&quot; /&gt;
    &lt;property name=&quot;viewResolvers&quot;&gt;
        &lt;list&gt;
            &lt;bean id=&quot;viewResolver&quot;
                class=&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver&quot;&gt;
                &lt;property name=&quot;cache&quot; value=&quot;true&quot; /&gt;
                &lt;property name=&quot;prefix&quot; value=&quot;&quot; /&gt;
                &lt;property name=&quot;suffix&quot; value=&quot;.ftl&quot; /&gt;
                &lt;property name=&quot;contentType&quot; value=&quot;text/html; charset=utf-8&quot; /&gt;
            &lt;/bean&gt;
        &lt;/list&gt;
    &lt;/property&gt;
    &lt;property name=&quot;defaultViews&quot;&gt;
        &lt;list&gt;
            &lt;!-- JSON --&gt;
            &lt;bean
                class=&quot;org.springframework.web.servlet.view.json.MappingJackson2JsonView&quot; /&gt;
            &lt;!-- XML --&gt;
            &lt;bean class=&quot;org.springframework.web.servlet.view.xml.MarshallingView&quot;&gt;
                &lt;property name=&quot;marshaller&quot;&gt;
                    &lt;bean class=&quot;org.springframework.oxm.xstream.XStreamMarshaller&quot; /&gt;
                &lt;/property&gt;
            &lt;/bean&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;
&lt;/beans&gt;
</code></pre></li>
</ol>

<h2 id="toc_7">结果展示</h2>

<p>为了更好的展示不同URL后缀以及不同Accept头对应的不同返回结果，我们使用curl命令对项目进行请求，观察返回结果。</p>

<ol>
<li><p>无后缀，默认URL</p>

<pre><code>curl http://localhost:8080/SpringHomework5_1/api/user/userList
</code></pre>

<p><img src="media/14773646522828/14773731907095.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>html后缀</p>

<pre><code>http://localhost:8080/SpringHomework5_1/api/user/userList.html
</code></pre>

<p><img src="media/14773646522828/14773756220422.jpg" alt=" " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>JSON后缀</p>

<pre><code>http://localhost:8080/SpringHomework5_1/api/user/userList.json
</code></pre>

<p><img src="media/14773646522828/14773756553739.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>XML后缀</p>

<pre><code>curl http://localhost:8080/SpringHomework5_1/api/user/userList.xml
</code></pre>

<p><img src="media/14773646522828/14773755762050.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>JSON头</p>

<pre><code>curl -H &#39;Accept:application/json&#39; http://localhost:8080/SpringHomework5_1/api/user/userList
</code></pre>

<p><img src="media/14773646522828/14773757816596.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
<li><p>XML头</p>

<pre><code>curl -H &#39;Accept:application/xml&#39; http://localhost:8080/SpringHomework5_1/api/user/userList
</code></pre>

<p><img src="media/14773646522828/14773757471295.jpg" alt=" " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
</ol>

<h2 id="toc_8">总结</h2>

<p>虽然完成了目标任务，但是对于Spring整合其它框架以及SpringMVC的相关功能的具体熟悉还需要进一步学习。</p>

<h2 id="toc_9">代码</h2>

<p><a href="http://git.oschina.net/cobber/SpringHomework5_1">Demo</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网易Java Web微专业Spring-数据访问单元作业]]></title>
    <link href="http://swuzjb.github.io/14766902757975.html"/>
    <updated>2016-10-17T15:44:35+08:00</updated>
    <id>http://swuzjb.github.io/14766902757975.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>根据本单介绍的Spring JDBC，事务管理，MyBatis等内容，分别使用Spring JDBC及MyBatis提供一个转帐服务（保证事务），提供一个transferMoney接口：<br/>
transferMoney(Long srcUserId, Long targetUserId, double count)；// srcUserId及targetUserId为转帐用户标识</p>
</blockquote>

<h2 id="toc_0">相关表结构</h2>

<table>
<thead>
<tr>
<th style="text-align: center">列名</th>
<th style="text-align: center">类型</th>
<th style="text-align: center">备注</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">userId</td>
<td style="text-align: center">Long</td>
<td style="text-align: center">唯一用户标识</td>
</tr>
<tr>
<td style="text-align: center">balance</td>
<td style="text-align: center">double</td>
<td style="text-align: center">账户余额</td>
</tr>
</tbody>
</table>

<h2 id="toc_1">程序架构</h2>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-10-17-14766906872633.jpg" alt=" " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h3 id="toc_2">说明</h3>

<ul>
<li>UserDao 为统一的User数据库访问接口</li>
<li>UserService 为外部服务提供直接调用的接口</li>
</ul>

<h2 id="toc_3">实现说明</h2>

<ol>
<li><p>application-config配置，相关配置均有注释说明。其中事务的处理可以采用注解或AOP的XML配置方式，下列代码均有体现。</p>

<pre><code class="language-java">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
xmlns:mybatis=&quot;http://mybatis.org/schema/mybatis-spring&quot;
xsi:schemaLocation=&quot;
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx.xsd
http://mybatis.org/schema/mybatis-spring
http://mybatis.org/schema/mybatis-spring.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;

    &lt;!-- 数据库连接配置文件导入 --&gt;
    &lt;context:property-placeholder location=&quot;db.properties&quot; /&gt;
    &lt;!-- 扫描注解 --&gt;
    &lt;context:component-scan base-package=&quot;site.zhanjingbo&quot; /&gt;
    &lt;!-- 使用注解声明事务 --&gt;
    &lt;tx:annotation-driven transaction-manager=&quot;txManager&quot; /&gt;
    &lt;!-- MyBatis的自动扫描 --&gt;
    &lt;mybatis:scan base-package=&quot;site.zhanjingbo&quot; /&gt;

    &lt;!-- 数据源配置 --&gt;
    &lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;
        destroy-method=&quot;close&quot;&gt;
        &lt;property name=&quot;driverClassName&quot; value=&quot;${jdbc.driverClassName}&quot; /&gt;
        &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot; /&gt;
        &lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot; /&gt;
        &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot; /&gt;
    &lt;/bean&gt;
    &lt;!-- 事务管理器 --&gt;
    &lt;bean id=&quot;txManager&quot;
        class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;
    &lt;/bean&gt;

    &lt;!-- 使用AOP-XML声明事务 --&gt;
    &lt;!-- &lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;txManager&quot;&gt; &lt;tx:attributes&gt; 
        &lt;tx:method name=&quot;transfer*&quot; /&gt; &lt;/tx:attributes&gt; &lt;/tx:advice&gt; &lt;aop:config&gt; 
        &lt;aop:pointcut id=&quot;daoOperation&quot; expression=&quot;execution(* site.zhanjingbo.service.*.*(..))&quot; 
        /&gt; &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;daoOperation&quot; /&gt; &lt;/aop:config&gt; --&gt;

    &lt;!-- 配置myBatis的sqlSessionFactory --&gt;
    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;
        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;
        &lt;!-- 自动扫描mappers.xml文件 --&gt;
        &lt;property name=&quot;mapperLocations&quot;
            value=&quot;classpath:site/zhanjingbo/dao/myBatiesImpl/*.xml&quot;&gt;&lt;/property&gt;
        &lt;!-- myBatis配置文件 --&gt;
        &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis-config.xml&quot;&gt;&lt;/property&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre></li>
<li><p>UserDao的接口声明</p>

<pre><code class="language-java">public interface UserDao {
    public void reset();
    public List&lt;User&gt; getUserList();
    public void updateMoney(Long userId, double count);
}
</code></pre></li>
<li><p>UserDao的JDBC实现，其中JdbcTemplete由Spring进行装载。</p>

<pre><code class="language-java">@Component(&quot;UserJDBCDao&quot;)
public class UserDaoJDBCImpl implements UserDao {
    private JdbcTemplate jdbcTemplate;
    @Autowired
    public void setDataSource(DataSource dataSource) {
        this.jdbcTemplate = new JdbcTemplate(dataSource);
    }
    public void reset() {
        this.jdbcTemplate.execute(&quot;update UserBalance set balance=1000&quot;);
    }
    public List&lt;User&gt; getUserList() {
        return this.jdbcTemplate.query(&quot;select * from UserBalance&quot;, new RowMapper&lt;User&gt;() {
            public User mapRow(ResultSet rs, int rowNum) throws SQLException {
                User user = new User();
                user.setUserId(rs.getLong(&quot;userId&quot;));
                user.setBalance(rs.getDouble(&quot;balance&quot;));
                return user;
            }
        });
    }
    public void updateMoney(Long userId, double count) {
        this.jdbcTemplate.update(&quot;update UserBalance set balance=balance+? where userId=?&quot;, count, userId);
    }
}
</code></pre></li>
<li><p>UserDao的MyBatis实现，采用Mapper.xml的方式进行声明实现</p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;site.zhanjingbo.dao.UserDao&quot;&gt;
    &lt;resultMap type=&quot;User&quot; id=&quot;UserResult&quot;&gt;
        &lt;result property=&quot;userId&quot; column=&quot;userId&quot; /&gt;
        &lt;result property=&quot;balance&quot; column=&quot;balance&quot; /&gt;
    &lt;/resultMap&gt;
    &lt;update id=&quot;reset&quot;&gt;
        update UserBalance set balance=500
    &lt;/update&gt;

    &lt;select id=&quot;getUserList&quot; resultMap=&quot;UserResult&quot;&gt;
        select * from userBalance
    &lt;/select&gt;
    &lt;update id=&quot;updateMoney&quot;&gt;
        update UserBalance set balance=balance+#{param2} where userId=#{param1}
    &lt;/update&gt;
&lt;/mapper&gt; 
</code></pre></li>
<li><p>UserService的实现，其中主要为transferMoney方法的实现。由于该方法的业务逻辑，该方法应该确保事务性。采用注解的方式声明事务，则在该方法前添加<code>@Transactional</code>注解。采用配置文件方式对事务进行声明参考第1小节中的配置文件。</p>

<pre><code class="language-java">@Transactional(propagation = Propagation.REQUIRED)
public void transferMoney(Long srcUserId, Long targetUserId, double count) {
    userDao.updateMoney(srcUserId, 0 - count);
    userDao.updateMoney(targetUserId, count);
}
</code></pre>

<p>在UserService的实现过程中，我们需要调用UserDao的具体实例，在本次作业过程中我们采用了两种方法来实现UserDao。在测试不同的实现方式时只需要修改注入的UserDao的具体实例就可完成。为了明显区分两种实例的实现，我们在reset的方法中做了区别。其中JDBC实现方式Reset之后balance的值为1000，MyBatis实现方式reset之后的balance值为500。</p></li>
<li><p>Application调用代码</p>

<pre><code class="language-java">    public static void main(String[] args) {
        //加载Spring
        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;application-context.xml&quot;);
        //获取UserService实例
        UserService userService = applicationContext.getBean(UserService.class);
        userService.reset();
        try {
            userService.transferMoney(new Long(10000), new Long(10001), 100);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        List&lt;User&gt; userList = userService.getUserList();
        for (User user : userList) {
            System.out.println(user);
        }

        ((ConfigurableApplicationContext) applicationContext).close();
    }
</code></pre></li>
</ol>

<h2 id="toc_4">运行结果</h2>

<h3 id="toc_5">JDBC运行结果</h3>

<ol>
<li><p>正常执行<br/>
<img src="media/14766902757975/14766935577292.jpg" alt=""/></p></li>
<li><p>执行中异常，打印异常信息，数据回滚<br/>
<img src="media/14766902757975/14766935207561.jpg" alt=""/></p></li>
</ol>

<h3 id="toc_6">MyBatis运行结果</h3>

<ol>
<li><p>正常执行<br/>
<img src="media/14766902757975/14766936235948.jpg" alt=""/></p></li>
<li><p>执行中异常，打印异常信息，数据回滚<br/>
<img src="media/14766902757975/14766936425847.jpg" alt=""/></p></li>
</ol>

<h2 id="toc_7">程序地址</h2>

<p><a href="http://git.oschina.net/cobber/SpringHomework4_1">SpringHomework4_1</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网易Java Web微专业Spring-AOP容器作业]]></title>
    <link href="http://swuzjb.github.io/14759932535473.html"/>
    <updated>2016-10-09T14:07:33+08:00</updated>
    <id>http://swuzjb.github.io/14759932535473.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>完成一个基本的应用，提供若干个Service（&gt;=2），每个Service提供基本的增删查改的接口（实现随意，比如输出一行信息），通过AOP保证所有所有的Service接口在正常调用返回后以及抛出异常时（Service接口模拟），打出如下信息：函数名称，函数参数，并说明发生的事件：正常返回或者抛出异常。</p>
</blockquote>

<h2 id="toc_0">AOP模式示意图</h2>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-10-09-14759941824050.jpg" alt=" " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h2 id="toc_1">作业描述</h2>

<p>本次作业我设计了两个Service，分别是UserService和ProductService，每个Service分别提供增删改查操作（Print语句代替业务逻辑）。</p>

<ol>
<li><p>配置Spring配置文件，加入AOP相关的xsd文件。并配置AOP。</p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
xmlns:p=&quot;http://www.springframework.org/schema/p&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-2.0.xsd&quot;&gt;

    &lt;!-- 引入AOP --&gt;
    &lt;aop:aspectj-autoproxy /&gt;
    &lt;!-- 自动扫描annotation配置 --&gt;
    &lt;context:component-scan base-package=&quot;site.zhanjingbo&quot; /&gt;

    &lt;!-- 自定义的日志切面声明 --&gt;
    &lt;bean id=&quot;logAspect&quot; class=&quot;site.zhanjingbo.aspect.LogAspect&quot;&gt;&lt;/bean&gt;
&lt;/beans&gt;
</code></pre></li>
<li><p>编写Service。以UserService为例。</p>

<pre><code class="language-java">package site.zhanjingbo.service;
import org.springframework.stereotype.Component;

@Component
public class UserService {
    public void add(String username) throws Exception {
        System.out.println(&quot;添加用户:&quot; + username);
        throw new Exception(&quot;测试&quot;);
    }
    public void edit(String username) {
        System.out.println(&quot;添加用户:&quot; + username);
    }
    public void del(String username) {
        System.out.println(&quot;删除用户:&quot; + username);
    }
    public void find(String username) {
        System.out.println(&quot;查询用户:&quot; + username);
    }
}
</code></pre></li>
<li><p>编写Aspect，完成切面方法。</p>

<pre><code class="language-java">package site.zhanjingbo.aspect;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;

@Aspect
public class LogAspect {

    /**
     * 正常返回时调用
     * @param jp调用点信息
     */
    @AfterReturning(&quot;execution(* site.zhanjingbo.service.*.*(..))&quot;)
    public void logAfterReturning(JoinPoint jp){
        String className = jp.getSignature().getDeclaringTypeName();
        String methodName = jp.getSignature().getName();
        System.out.print(&quot;正常返回Log:调用&quot;+className+&quot;的&quot;+methodName+&quot;方法,参数为：&quot;);
        for (Object obj : jp.getArgs()) {
            System.out.print(obj.toString());
        }
        System.out.println(&quot;&quot;);
    }
    /**
     * 抛出异常返回时调用
     * @param jp 调用点信息
     * @param ex 异常信息
     */
    @AfterThrowing(pointcut=&quot;execution(* site.zhanjingbo.service.*.*(..))&quot;,throwing=&quot;ex&quot;)
    public void logAfterThrowing(JoinPoint jp,Exception ex){
        String className = jp.getSignature().getDeclaringTypeName();
        String methodName = jp.getSignature().getName();
        System.out.print(&quot;异常Log:调用&quot;+className+&quot;的&quot;+methodName+&quot;方法,参数为：&quot;);
        for (Object obj : jp.getArgs()) {
            System.out.print(obj.toString());
        }
        System.out.println(&quot;。抛出异常:&quot;+ex.getMessage()+&quot;!&quot;);
    }
}
</code></pre></li>
<li><p>编写模拟调用的Application类，来模拟业务。</p>

<pre><code class="language-java">public class Application {
    public static void main(String[] args){
        //加载Spring相关配置文件
        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;application-context.xml&quot;);

        //获取UserService实例
        UserService userService = applicationContext.getBean(UserService.class);
        //调用方法
        try {
            userService.add(&quot;ZhangSan&quot;);
        } catch (Exception e) {

        }
        //获取ProductService实例
        ProductService productService = applicationContext.getBean(ProductService.class);
        //调用方法
        productService.del(&quot;Pen&quot;);

        ((ConfigurableApplicationContext)applicationContext).close();
    }
}
</code></pre></li>
</ol>

<h2 id="toc_2">程序运行结果</h2>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-10-09-14759958614665.jpg" alt=" " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<p>Service的方法正常调用或调用异常结束后，完成对应的切面方法响应，输出对应的Log。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网易Java Web微专业Spring-IoC容器作业]]></title>
    <link href="http://swuzjb.github.io/14748062329626.html"/>
    <updated>2016-09-25T20:23:52+08:00</updated>
    <id>http://swuzjb.github.io/14748062329626.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>假设我们有个应用（Application），它包含一个写文件的服务（FileWriterService），该服务在创建时会创建并打开一个文件，销毁时关闭该文件，并且该服务包含一个write(String content)方法：会将content写入到文件中，要求：<br/>
1. 使用Spring IoC的相关内容组织该程序；<br/>
2. 文件路径通过配置文件（properties）指定；<br/>
基本要求：必须附加一个项目说明文档，说明每个功能点对应程序的运行结果（截图），项目的接口说明或者关键代码（不要把全部代码贴出来）等可以反映项目结果的内容。提交作业的时候必须有这个项目说明文档，否则会影响最终评分</p>
</blockquote>

<h2 id="toc_0">程序结构</h2>

<p>根据题目要求，程序采用IoC的方式进行组织和构建。<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-09-27-14749583867443.jpg" alt=""/></p>

<h2 id="toc_1">核心代码与结果</h2>

<ol>
<li><p>FileWriterService接口定义</p>

<pre><code class="language-java">public interface FileWirterService {
    public void write(String content);
}
</code></pre></li>
<li><p>FileWriterService实现类FileWriterServiceImpl</p>

<pre><code class="language-java">//声明一个Bean的id
@Component(&quot;fileWriterService&quot;)
public class FileWirterServiceImpl implements FileWirterService{

    //通过配置文件获取参数，注入到FileWirterServiceImpl中
    @Value(&quot;${filePath}&quot;)
    private File file;
    private FileWriter fw;
    //创建时调用，打开一个文件，获取输出流
    @PostConstruct
    public void init() {
        try {
            //判断文件是否存在，如不存在则创建文件
            if (!file.exists()) {
                file.createNewFile();
            }
            //打开文件
            fw = new FileWriter(file, true);
            System.out.println(&quot;打开文件&quot;);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public void write(String content) {
        try {
            //向文件中写入内容，并换行
            fw.write(content+&quot;\n&quot;);
            System.out.println(&quot;文件写入:&quot;+content);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    //销毁前调用，关闭文件输出流，释放文件
    @PreDestroy
    public void destory() {
        try {
            //关闭文件的输出流
            if (fw != null) {
                fw.flush();
                fw.close();
            }
            System.out.println(&quot;关闭文件&quot;);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
</code></pre></li>
<li><p>读取配置文件获取FilePath参数。</p>

<ol>
<li>建立配置文件：<code>writer.properties</code>。写入配置<code>filePath=/Users/zhanjingbo/Desktop/spring.txt</code>，记录文件路径。</li>
<li><p>在Spring的<code>application-context.xml</code>中加入读取配置文件的配置。</p>

<pre><code class="language-xml">&lt;bean id=&quot;writerServiceProperties&quot; class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;
    &lt;property name=&quot;location&quot; value=&quot;classpath:writer.properties&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre></li>
</ol></li>
<li><p>编写Application的主类，实现main方法。</p>

<pre><code class="language-java">public static void main(String[] args) {
    //加载spring的配置文件，创建容器
    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;application-context.xml&quot;);
    //通过Bean的id来对FileWriterService进行注入
    FileWirterService fileWriterService = applicationContext.getBean(&quot;fileWriterService&quot;,FileWirterService.class);
    //调用业务逻辑
    fileWriterService.write(&quot;Hello World&quot;);
    //关闭容器
    ((ConfigurableApplicationContext)applicationContext).close();
}
</code></pre></li>
<li><p>结果展示</p>

<ul>
<li><p>控制台的相关输出<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-09-27-14749592874889.jpg" alt=""/></p></li>
<li><p>文件写入情况<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-09-27-14749593122837.jpg" alt=""/></p></li>
</ul></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据库连接池]]></title>
    <link href="http://swuzjb.github.io/14729975970385.html"/>
    <updated>2016-09-04T21:59:57+08:00</updated>
    <id>http://swuzjb.github.io/14729975970385.html</id>
    <content type="html"><![CDATA[
<p>建立数据库连接是一个非常耗时耗资源的行为，在大量并发的情况下，会降低服务器性能。同时，如果连接数超过最大的数据库允许连接值，数据库会直接抛出异常，非常不友好。为了解决上述的问题，我们引入了数据连接池的概念。<br/>
数据库连接池类似于线程池，通过连接池预先同数据库建立一些连接，放在内存中，应用程序需要建立数据库连接时直接到连接池中申请一个就行，用完后再放回去，避免频繁的新建和关闭连接对象</p>

<h2 id="toc_0">DBCP</h2>

<p>DBCP（DataBase Connection Pool）数据库连接池，是java数据库连接池的一种，由Apache开发，通过数据库连接池，可以让程序自动管理数据库连接的释放和断开。同时DBCP也是tomcat所使用的连接池组价。</p>

<h3 id="toc_1">DBCP的简单使用DEMO</h3>

<pre><code class="language-java">package site.zhanjingbo.HelloDB;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.apache.commons.dbcp2.BasicDataSource;

public class HelloDBCP {

    static final String DRIVER_NAME = &quot;com.mysql.jdbc.Driver&quot;;
    static final String DB_URL = &quot;jdbc:mysql://localhost:3307/cloud_study?characterEncoding=utf8&quot;;
    static final String DB_USER = &quot;root&quot;;
    static final String DB_PASSWORD = &quot;&quot;;

    public static BasicDataSource ds = null;

    public static void init() {
        ds = new BasicDataSource();
        ds.setDriverClassName(DRIVER_NAME);
        ds.setUsername(DB_USER);
        ds.setUrl(DB_URL);
        ds.setPassword(DB_PASSWORD);
    }

    public static void search() {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            conn = ds.getConnection();
            stmt = conn.createStatement();
            rs = stmt.executeQuery(&quot;select username from user&quot;);
            while (rs.next()) {
                System.out.println(&quot;Hello &quot; + rs.getString(&quot;username&quot;));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
            }
        }
    }

    public static void main(String[] args) {
        init();
        search();
    }
}

</code></pre>

<p>通过上述的demo可见，使用DBCP对数据进行访问实际操作与JDBC并无不同。唯一的区别就是Connection对象的获取是通过BasicDataSource对象来获得而不是DriverManage对象。<br/>
注：释放Connection对象同样是调用Connection的close()方法，不过这里的close()方法是被DBCP重写过的，是将连接对象重新放回连接池，而不是释放销毁。</p>

<h3 id="toc_2">DBCP高级API</h3>

<p>为了更好的设置和使用DBCP连接池，使数据库连接池效率更高，DBCP还提供了多个API接口供我们使用。</p>

<table>
<thead>
<tr>
<th style="text-align: center">接口</th>
<th style="text-align: center">作用</th>
<th style="text-align: center">建议</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">.setInitialSize()</td>
<td style="text-align: center">设置初始化连接数</td>
<td style="text-align: center">设置为项目预期访问量</td>
</tr>
<tr>
<td style="text-align: center">.setMaxTotal()</td>
<td style="text-align: center">最大连接数</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">ds.setMaxWaitMillis()</td>
<td style="text-align: center">线程最大等待时间</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">.setMaxIdle()</td>
<td style="text-align: center">最大空闲连接数</td>
<td style="text-align: center">与MinIdle相同</td>
</tr>
<tr>
<td style="text-align: center">.setMinIdle()</td>
<td style="text-align: center">最小空闲连接数</td>
<td style="text-align: center">与MaxIdle相同</td>
</tr>
</tbody>
</table>

<h4 id="toc_3">DBCP定期检查</h4>

<p>为了保证连接池中的连接都是有效的，我们需要定期的对连接池中的连接进行检查，对失效的连接及时进行关闭。相关API如下：</p>

<table>
<thead>
<tr>
<th style="text-align: center">API</th>
<th style="text-align: center">作用</th>
<th style="text-align: center">建议</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">.setTestWhileIdle(true)</td>
<td style="text-align: center">是否开启定期检查</td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">.setMinEvictableIdle</td>
<td style="text-align: center">最小空闲时间，超过该值被销毁</td>
<td style="text-align: center">小于服务器连接失效时间(一般为8小时)</td>
</tr>
<tr>
<td style="text-align: center">.setTimeBetweenEvictionRunsMillis</td>
<td style="text-align: center">检查时间间隔</td>
<td style="text-align: center"></td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cookie与Session]]></title>
    <link href="http://swuzjb.github.io/14728168486763.html"/>
    <updated>2016-09-02T19:47:28+08:00</updated>
    <id>http://swuzjb.github.io/14728168486763.html</id>
    <content type="html"><![CDATA[
<p>在开发过程中我们经常需要保存一些状态信息如用户登录状态等，但是由于HTTP协议的无状态特性，这些功能无法直接实现。所以我们引入了Cookie与Session这两个概念用于保存一些信息。</p>

<h2 id="toc_0">Cookie</h2>

<p>Cookie的作用通俗地说就是当一个用户通过HTTP协议访问一个服务器的时候，这个服务器会将一些Key/Value键值对返回给客户端浏览器，并给这些数据加上一些限制条件，在条件符合时这个用户下次访问这个服务器的时候，数据又被完整地带回给服务器。</p>

<h3 id="toc_1">Cookie如何工作</h3>

<ol>
<li>用户通过浏览器请求某个Servlet，在请求过程中如果本地有该站点的Cookie信息，浏览器会将这些信息放入request请求的请求头中；</li>
<li>在Servlet中可以通过<code>request.getCookies();</code>获取当前的Cookie数组；</li>
<li>根据自己的业务需求，新建Cookie对象实例，分别设置key和value的值；</li>
<li>将需要添加的Cookie实例通过<code>response.addCookie();</code>方法添加到响应当中返回客户端，客户端根据Cookie的生命周期（MaxAge属性）来选择是否将此Cookie写入硬盘当中。</li>
</ol>

<h3 id="toc_2">DemoCode</h3>

<pre><code class="language-java">    String getCookie(Cookie[] cookies, String key) { 
        if (cookies != null) { 
            for (Cookie cookie : cookies) { 
                if (cookie.getName().equals(key)) { 
                    return cookie.getValue(); 
                } 
            } 
        } 
        return null; 
    } 

    @Override 
    public void doGet(HttpServletRequest request, 
                      HttpServletResponse response) 
            throws IOException, ServletException { 
        Cookie[] cookies = request.getCookies(); 
        String userName = getCookie(cookies, &quot;userName&quot;); 
        String userAge = getCookie(cookies, &quot;userAge&quot;); 
        if (userName == null) { 
            response.addCookie(new Cookie(&quot;userName&quot;, &quot;user&quot;)); 
        } 
        if (userAge == null) { 
            response.addCookie(new Cookie(&quot;userAge&quot;, &quot;28&quot;)); 
        } 
         
 }
</code></pre>

<h3 id="toc_3">使用Cookie的限制</h3>

<p>Cookie是 HTTP 协议头中的一个字段，虽然HTTP协议本身对这个字段并没有多少限制，但是 Cookie 最终还是存储在浏览器里，所以不同的浏览器对Cookie的存储都有一些限制，下表是一些通常的浏览器对 Cookie的大小和数量的限制。</p>

<table>
<thead>
<tr>
<th style="text-align: center">浏览器版本</th>
<th style="text-align: center">Cookie数限制（个/域名）</th>
<th style="text-align: center">总大小限制</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">IE6</td>
<td style="text-align: center">20</td>
<td style="text-align: center">4095B</td>
</tr>
<tr>
<td style="text-align: center">IE7、8、9</td>
<td style="text-align: center">50</td>
<td style="text-align: center">4095B</td>
</tr>
<tr>
<td style="text-align: center">Chrome</td>
<td style="text-align: center">50</td>
<td style="text-align: center">&gt;8000</td>
</tr>
<tr>
<td style="text-align: center">FireFox</td>
<td style="text-align: center">50</td>
<td style="text-align: center">4097B</td>
</tr>
</tbody>
</table>

<hr/>

<h2 id="toc_4">Session</h2>

<p>前面已经介绍了 Cookie 可以让服务端程序跟踪每个客户端的访问，但是每次客户端的访问都必须传回这些 Cookie，如果 Cookie 很多，这无形地增加了客户端与服务端的数据传输量，而 Session 的出现正是为了解决这个问题。</p>

<h3 id="toc_5">Session如何工作</h3>

<ol>
<li>session是基于Cookie的，同一个客户端每次和服务端交互时，不需要每次都传回所有的 Cookie 值，而是只要传回一个 ID，这个 ID 是客户端第一次访问服务器的时候生成的，而且每个客户端是唯一的。这样每个客户端就有了一个唯一的 ID，客户端只要传回这个 ID 就行了，这个 ID 通常是 NANE 为 JSESIONID 的一个 Cookie；</li>
<li>有了Session ID服务端就可以创建HttpSession对象了，第一次触发通过<code>request.getSession()</code>方法。如果当前的Session ID 还没有对应的HttpSession对象，那么就创建一个新的，并将这个对象加到org.apache.catalina.Manager的sessions容器中保存。Manager类将管理所有Session的生命周期，如果该session存在则直接返回；</li>
<li>直接操作session对象对key/value键值对进行存储，数据保存在服务器端，可以通过api手工操作其声明周期</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简述HTTP请求过程]]></title>
    <link href="http://swuzjb.github.io/14720186733605.html"/>
    <updated>2016-08-24T14:04:33+08:00</updated>
    <id>http://swuzjb.github.io/14720186733605.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>HTTP请求是web程序服务的基础，要想写好web程序，必然要对http请求的过程进行掌握。</p>
</blockquote>

<h2 id="toc_0">HTTP请求步骤</h2>

<ol>
<li>如果是以域名形式进行web访问，则浏览器会先通过DNS服务将域名转化为对应的IP地址，为下一步访问做准备。</li>
<li>通过IP地址与服务器建立TCP连接</li>
<li>客户端向服务器端发送Request请求</li>
<li>服务器端向客户端发送Response响应</li>
<li>服务器端关闭TCP连接。一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码：<code>Connection:keep-alive</code>。TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。 </li>
</ol>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-08-24-14720197735370.jpg" alt=""/></p>

<h2 id="toc_1">HTTP请求头,响应头字段</h2>

<h3 id="toc_2">请求头</h3>

<ul>
<li>Accept: text/html, image/* ：客户机支持的数据类型</li>
<li>Accept-Charset: UTF-8 ：客户机采用的编码</li>
<li>Accept-Encoding: gzip,compress:客户机支持的数据压缩格式</li>
<li>Accept-Language: en-us,zh-cn:客户机的语言环境</li>
<li>Host: localhost:8080 :访问的主机名</li>
<li>If-Modified-Since: Tue, 11 Jul 2000 18:23:51 GMT : 资源的缓存时间,用以判断服务器上的资源是否发生变化</li>
<li>Referer: <a href="http://www.zhanjingbo.site">http://www.zhanjingbo.site</a> : 从哪个页面跳转来访问资源的,用以实现防盗链</li>
<li>User-Agent: Mozilla/4.0 (compatible;MSIE 5.5;Windows NT 5.0):客户机的软件环境</li>
<li>Connection: close/Keep-Alive:请求结束后,是关闭连接还是保持连接</li>
<li>Date: Tue, 11 Jul 2000 18:23:51 GMT当前请求时间</li>
<li>Range:指示服务器只传输一部分web资源.可以用来实现断点续传功能

<ul>
<li>Range字段可以通过3种格式设置要传输的字节范围:</li>
<li>Range: bytes=1000-2000:传输范围从1000到2000字节</li>
<li>Range: bytes=1000-:传输第1000个字节以后的所有内容</li>
<li>Range: bytes=10000:传输最后1000个字节</li>
</ul></li>
</ul>

<h3 id="toc_3">响应头</h3>

<ul>
<li>Location：这个头配合302状态码使用，重定向地址</li>
<li>Server:Apache-Coyote/1.1:服务器类的类型</li>
<li>Content-Encoding：服务器通过这个头，数据压缩的格式</li>
<li>Content-Type：服务器通过这个头告诉浏览器送回数据的类型</li>
<li>Refresh：服务器通过这个头，告诉浏览器隔多长时间刷新一次</li>
<li>Connection:keep-alive\close:访问完后的状态</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java康复性训练——SpringMVC]]></title>
    <link href="http://swuzjb.github.io/14693288315265.html"/>
    <updated>2016-07-24T10:53:51+08:00</updated>
    <id>http://swuzjb.github.io/14693288315265.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>SpringMVC是一套功能强大，性能强悍且使用方便的优秀MVC框架</p>
</blockquote>

<h2 id="toc_0">SpringMVC-HelloWorld</h2>

<ol>
<li>导入相关jar包</li>
<li><p>配置web.xml文件，设置全局拦截器。拦截所有请求，转发给SpringMVC</p>

<pre><code class="language-xml">&lt;servlet&gt;
    &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;
    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
        &lt;param-value&gt;classpath:spring-mvc.xml&lt;/param-value&gt;
    &lt;/init-param&gt;
&lt;/servlet&gt;
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;
    &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</code></pre></li>
<li><p>添加SpringMVC配置文件spring-mvc.xml</p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:p=&quot;http://www.springframework.org/schema/p&quot;
    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xsi:schemaLocation=&quot;
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;

    &lt;!-- 使用注解的包，包括子集 --&gt;
    &lt;context:component-scan base-package=&quot;site.zhanjingbo&quot;/&gt;

    &lt;!-- 视图解析器 --&gt;
    &lt;bean id=&quot;viewResolver&quot;
        class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;
        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt;
        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;
    &lt;/bean&gt;
&lt;/beans&gt;
</code></pre></li>
<li><p>添加控制器HelloContorller</p>

<pre><code class="language-java">package site.zhanjingbo.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class HelloController {

    @RequestMapping(&quot;/hello&quot;)
    public String hello(Model model){
        model.addAttribute(&quot;message&quot;, &quot;HelloWorld!&quot;);
        return &quot;hello&quot;;
    }
}
</code></pre></li>
<li><p>在/WEB-INF/jsp/下建立显示返回页面hello.jsp</p>

<pre><code class="language-html">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
${message }
&lt;/body&gt;
&lt;/html&gt;
</code></pre></li>
<li><p>完成。启动Tomcat，访问<a href="http://localhost:8080/SpringMVC/hello.do">http://localhost:8080/SpringMVC/hello.do</a>  查看<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-07-24-14693326495259.jpg" alt=""/></p></li>
</ol>

<h2 id="toc_1">SpringMVC控制器</h2>

<ul>
<li>@RequestMapping：用于指定方法的响应URL或模块URL</li>
<li>@RequestParam：绑定提交参数与控制器方法参数的注解。<code>@RequestParam(value=&quot;&quot;,required=true/false)</code></li>
<li>ModelAndView:作为控制器的返回值类型，返回模型与视图</li>
<li>SpringMVC对象属性自动封装:SpringMVC可以根据表单传入的数据自动封装控制器参数对象</li>
<li><p>SpringMVC POST请求中文乱码:在web.xml中添加过滤器</p>

<pre><code class="language-xml">&lt;!-- 编码过滤器 --&gt;
&lt;filter&gt;
    &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;
    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;
    &lt;async-supported&gt;true&lt;/async-supported&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;encoding&lt;/param-name&gt;
        &lt;param-value&gt;UTF-8&lt;/param-value&gt;
    &lt;/init-param&gt;
&lt;/filter&gt;
&lt;filter-mapping&gt;
    &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
</code></pre></li>
<li><p>Controller内部转发与重定向</p>

<ul>
<li>转发：<code>forward:</code></li>
<li>重定向:<code>redirect:</code></li>
</ul></li>
<li><p>SpringMVC对Servlet API的支持</p>

<ul>
<li>只需要在控制器方法的参数列表中添加HttpServletRequest、HttpServletResponse参数即可自动注入实例对象。</li>
</ul></li>
<li><p>SpringMVC对json的支持：这个有很多实例，建议直接上搜索引擎。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java康复性训练——Spring（2）]]></title>
    <link href="http://swuzjb.github.io/14691739607250.html"/>
    <updated>2016-07-22T15:52:40+08:00</updated>
    <id>http://swuzjb.github.io/14691739607250.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">AOP</h2>

<blockquote>
<p>AOP(Aspect Oriented Programming,面向切面编程)，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是软件开发的一个热点，也是Spring框架中的一个重要内容。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高开发效率。<br/>
主要功能是：日志记录、性能统计、安全控制、事务处理、异常处理等</p>
</blockquote>

<h2 id="toc_1">Spring AOP实例</h2>

<p>AOP的使用可以让我们在某个业务逻辑或事务执行的各个不同时期加入灵活的代码，让我们的权限控制、日志记录、性能统计等基础功能与业务逻辑彻底分离，降低耦合。这种执行方式称之为通知，通知有以下几种类型：</p>

<ol>
<li>前置通知：在业务逻辑开始之前执行。</li>
<li>后置通知：在业务逻辑结束之后执行。</li>
<li>环绕通知：可以灵活配置业务逻辑的执行时间或是否执行业务逻辑，功能上有点类似于Filter。</li>
<li>返回通知：当业务逻辑执行完并返回非空数据时执行。</li>
<li>异常通知：当业务逻辑执行过程中产生异常时执行。</li>
</ol>

<h3 id="toc_2">实例demo：</h3>

<ol>
<li><p>通知具体内容类：</p>

<pre><code class="language-java">package site.zhanjingbo.advice;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;

public class UserServiceAspect {
    public void doBefore(JoinPoint jp){
        System.out.println(&quot;请求类型:&quot;+jp.getTarget().getClass().getName()+&quot;,请求方法:&quot;+jp.getSignature().getName());
        System.out.println(&quot;开始添加用户：&quot;+jp.getArgs()[0]);
    }
    public void doAfter(JoinPoint jp){
        System.out.println(&quot;请求类型:&quot;+jp.getTarget().getClass().getName()+&quot;,请求方法:&quot;+jp.getSignature().getName());
        System.out.println(&quot;完成添加用户：&quot;+jp.getArgs()[0]);
    }
    public Object doAround(ProceedingJoinPoint pjp) throws Throwable{
        System.out.println(&quot;环绕前&quot;);
        Object retVal = pjp.proceed();
        System.out.println(&quot;环绕后&quot;);
        return retVal;
    }   
    public void doAfterThrowing(JoinPoint jp,Throwable ex){
        System.out.println(&quot;异常通知信息：&quot;+ex.getMessage());
    }
    public void doAfterReturning(JoinPoint jp){
        System.out.println(&quot;返回通知&quot;);
    }
}
</code></pre></li>
<li><p>beans.xml的配置</p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;

        &lt;bean id=&quot;userService&quot; class=&quot;site.zhanjingbo.service.impl.UserServiceImpl&quot;/&gt;
        &lt;bean id=&quot;userServiceAspect&quot; class=&quot;site.zhanjingbo.advice.UserServiceAspect&quot; /&gt;

        &lt;aop:config&gt;
            &lt;aop:aspect id=&quot;userServiceAspect&quot; ref=&quot;userServiceAspect&quot;&gt;
                &lt;!-- 声明一个切点 --&gt;
                &lt;aop:pointcut expression=&quot;execution(* site.zhanjingbo.service.*.*(..))&quot; id=&quot;businessService&quot;/&gt;  
                &lt;!-- 为切点添加通知 --&gt;
                &lt;aop:before method=&quot;doBefore&quot; pointcut-ref=&quot;businessService&quot;/&gt;
                &lt;aop:after method=&quot;doAfter&quot; pointcut-ref=&quot;businessService&quot;/&gt;
                &lt;aop:around method=&quot;doAround&quot; pointcut-ref=&quot;businessService&quot; /&gt;
                &lt;aop:around method=&quot;doAround&quot; pointcut-ref=&quot;businessService&quot;/&gt;
                &lt;aop:after-returning method=&quot;doAfterReturning&quot; pointcut-ref=&quot;businessService&quot;/&gt;
                &lt;aop:after-throwing method=&quot;doAfterThrowing&quot; pointcut-ref=&quot;businessService&quot; throwing=&quot;ex&quot;/&gt;
            &lt;/aop:aspect&gt;
        &lt;/aop:config&gt;
&lt;/beans&gt;
</code></pre></li>
<li><p>执行顺序<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-07-22-14691852095800.jpg" alt="" class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p></li>
</ol>

<h2 id="toc_3">Spring对Dao的支持</h2>

<p>Spring发布以来很好的支持了Hibernate和Mybatis等ORM框架，只需要简单的配置，就可以很方便的实现dao的注入。</p>

<h2 id="toc_4">Spring对事务的支持</h2>

<p>事务,是业务逻辑非常重要的一个概念。事务具有的原子性、一致性、隔离性、永久性是数据正确的保证。Spring为开发人员实现事务这个特性提供了非常方便的实现方式。</p>

<ol>
<li>编程式事务管理：通过Spring提供的事务模板类<code>org.springframework.transaction.support.TranscationTemplate</code>来实现事务处理。</li>
<li>声明式事务管理：通过XML或注解配置的方式自动添加事务处理。</li>
<li><p>事务传播行为：Spring中，当一个service方法调用另外一个service方法的时候，因为每个service方法都有事务，这时候就出现了事务的嵌套，就产生了事务传播行为。</p>

<ol>
<li>PROPAGATION_REQUIRED--支持当前事务,如果当前没有事务,就新建一个事务。这是最常见的选择。</li>
<li>PROPAGATION_SUPPORTS--支持当前事务,如果当前没有事务,就以非事务方式执行。</li>
<li>PROPAGATION_MANDATORY--支持当前事务,如果当前没有事务,就抛出异常。</li>
<li>PROPAGATION_REQUIRES_NEW--新建事务,如果当前存在事务,把当前事务挂起。</li>
<li>PROPAGATION_NOT_SUPPORTED--以非事务方式执行操作,如果当前存在事务,就把当前事务挂起。</li>
<li>PROPAGATION_NEVER--以非事务方式执行,如果当前存在事务,则抛出异常。</li>
</ol>

<pre><code class="language-xml">&lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;
&lt;bean id=&quot;transactionManager&quot;
    class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;
&lt;/bean&gt;

&lt;!-- 配置事务通知属性 --&gt;  
&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;  
    &lt;!-- 定义事务传播属性 --&gt;  
    &lt;tx:attributes&gt;  
        &lt;tx:method name=&quot;insert*&quot; propagation=&quot;REQUIRED&quot; /&gt;  
        &lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot; /&gt;  
        &lt;tx:method name=&quot;edit*&quot; propagation=&quot;REQUIRED&quot; /&gt;  
        &lt;tx:method name=&quot;save*&quot; propagation=&quot;REQUIRED&quot; /&gt;  
        &lt;tx:method name=&quot;add*&quot; propagation=&quot;REQUIRED&quot; /&gt;  
        &lt;tx:method name=&quot;new*&quot; propagation=&quot;REQUIRED&quot; /&gt;  
        &lt;tx:method name=&quot;set*&quot; propagation=&quot;REQUIRED&quot; /&gt;  
        &lt;tx:method name=&quot;remove*&quot; propagation=&quot;REQUIRED&quot; /&gt;  
        &lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot; /&gt;  
        &lt;tx:method name=&quot;change*&quot; propagation=&quot;REQUIRED&quot; /&gt;  
        &lt;tx:method name=&quot;get*&quot; propagation=&quot;REQUIRED&quot; read-only=&quot;true&quot; /&gt;  
        &lt;tx:method name=&quot;find*&quot; propagation=&quot;REQUIRED&quot; read-only=&quot;true&quot; /&gt;  
        &lt;tx:method name=&quot;load*&quot; propagation=&quot;REQUIRED&quot; read-only=&quot;true&quot; /&gt;  
        &lt;tx:method name=&quot;*&quot; propagation=&quot;REQUIRED&quot; read-only=&quot;true&quot; /&gt;  
    &lt;/tx:attributes&gt;  
&lt;/tx:advice&gt;  
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java康复性训练——Spring（1）]]></title>
    <link href="http://swuzjb.github.io/14690817459253.html"/>
    <updated>2016-07-21T14:15:45+08:00</updated>
    <id>http://swuzjb.github.io/14690817459253.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>Spring是一个开源框架，Spring是于2003 年兴起的一个轻量级的Java 开发框架，由Rod Johnson创建。简单来说，Spring是一个分层的JavaSE/EE full-stack(一站式) 轻量级开源框架。</p>
</blockquote>

<h2 id="toc_0">Spring IOC</h2>

<p>IOC(Inverse of Control)控制反转,又称作依赖注入。是一种重要的面向对象编程的法则，用于削减计算机程序的耦合问题，是轻量级Spring框架的核心。<br/>
Spring的IOC的核心就是为各类依赖进行注入，Spring将注入的单例实例称之为bean。依赖注入也就是将Bean注入实例。</p>

<h3 id="toc_1">依赖注入</h3>

<ol>
<li><p>装配一个Bean</p>

<ol>
<li><p>在Spring的bean.xml文件中填写如下配置：</p>

<pre><code class="language-xml">&lt;bean id=&quot;user1&quot; class=&quot;site.zhanjingbo.model.User&quot;&gt;&lt;/bean&gt; 
</code></pre></li>
<li><p>在需要对实例进行初始化的时候使用如下代码：</p>

<pre><code class="language-java">public static void main(String[] args) {

    //加载Spring-bean配置信息
    ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);

    //获取id为user1的bean的实例
    User user1 = (User)ac.getBean(&quot;user1&quot;);
    System.out.println(user1);
}
</code></pre></li>
</ol></li>
<li><p>属性注入：为注入的实例设置属性值。通过配置beans.xml实现，实现代码如下:</p>

<pre><code class="language-xml">&lt;bean id=&quot;user2&quot; class=&quot;site.zhanjingbo.model.User&quot;&gt;
    &lt;property name=&quot;id&quot; value=&quot;2&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;username&quot; value=&quot;administrator&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;password&quot; value=&quot;password&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
</code></pre></li>
<li><p>构造函数注入：在实例化bean时调用指定的构造方法。通过配置beans.xml文件实现。</p>

<pre><code class="language-xml">&lt;bean id=&quot;user3&quot; class=&quot;site.zhanjingbo.model.User&quot;&gt;
    &lt;!-- 通过索引来设置参数值 --&gt;
    &lt;constructor-arg index=&quot;0&quot; value=&quot;3&quot;&gt;&lt;/constructor-arg&gt;
    &lt;!-- 通过类型来设置参数值 --&gt;
    &lt;constructor-arg type=&quot;String&quot; value=&quot;username&quot;&gt;&lt;/constructor-arg&gt;
    &lt;!-- 通过参数名来设置参数值 --&gt;
    &lt;constructor-arg name=&quot;password&quot; value=&quot;password&quot;&gt;&lt;/constructor-arg&gt;
&lt;/bean&gt;
</code></pre></li>
<li><p>工厂方法注入：通过自己定义的工厂方法对bean进行实例化注入。</p>

<ol>
<li><p>静态工厂方法，在beans.xml中调用。</p>

<pre><code class="language-xml">&lt;bean id=&quot;user4&quot; class=&quot;site.zhanjingbo.factory.UserFactory&quot; factory-method=&quot;createUser&quot;&gt;&lt;/bean&gt;
</code></pre></li>
<li><p>非静态工厂方法,先声明工厂类的Bean，再对其进行调用</p>

<pre><code class="language-xml">&lt;bean id=&quot;userFactory&quot; class=&quot;site.zhanjingbo.factory.UserFactory&quot;&gt;&lt;/bean&gt;
&lt;bean id=&quot;user5&quot; factory-bean=&quot;userFactory&quot; factory-method=&quot;createUser&quot;&gt;&lt;/bean&gt;
</code></pre></li>
</ol></li>
</ol>

<h3 id="toc_2">注入参数</h3>

<ol>
<li>基本类型值：参考上一节属性注入。</li>
<li>注入Bean：<code>&lt;property name=&quot;role&quot; ref=&quot;role1&quot;&gt;&lt;/property&gt;</code>。</li>
<li>内部Bean，为了防止bean被其他部分引用，可以将bean声明在<code>&lt;property&gt;&lt;/property&gt;</code>之间，仅供自己引用。</li>
<li><code>null</code>值，在<code>&lt;property&gt;&lt;/property&gt;</code>之间添加<code>&lt;null&gt;&lt;/null&gt;</code>表示空值。</li>
<li>级联属性，直接对属性对象的属性进行赋值。要确保该属性对象不为null。<code>&lt;property name=&quot;role.name&quot; value=&quot;admin&quot;&gt;&lt;/property&gt;</code></li>
<li><p>集合类型属性，可以用下列配置来实现。</p>

<pre><code class="language-xml">&lt;!-- list--&gt;
&lt;property name=&quot;list&quot;&gt;
    &lt;list&gt;
        &lt;value&gt;&lt;/value&gt;
    &lt;/list&gt;
&lt;/property&gt;
&lt;!--set--&gt;
&lt;property name=&quot;set&quot;&gt;
    &lt;set&gt;
        &lt;value&gt;&lt;/value&gt;
    &lt;/set&gt;
&lt;/property&gt;
&lt;!--map--&gt;
&lt;property name=&quot;map&quot;&gt;
    &lt;map&gt;
        &lt;entry&gt;
            &lt;key&gt;&lt;value&gt;key&lt;/value&gt;&lt;/key&gt;
            &lt;value&gt;value&lt;/value&gt;
        &lt;/entry&gt;
    &lt;/map&gt;
&lt;/property&gt;
</code></pre></li>
</ol>

<h3 id="toc_3">自动装配</h3>

<p>通过配置default-autowrite属性，Spring IOC容器可以自动为程序注入bean；默认是no，不启用自动装配。default-autowrite的类型有byName，byType,constructor。<br/>
- byName:通过名称进行自动匹配<br/>
- byType:根据类型进行自动匹配<br/>
- constructor:和byType类似，只不过它是根据构造方法注入而言的，根据类型，自动注入。<br/>
<em>建议：自动装配机制由于屏蔽了装配的细节，容易产生潜在的错误，慎用</em></p>

<h3 id="toc_4">方法注入</h3>

<p>Spring bean默认的作用域是单例的，每次获取的都是同一个对象。我们可以通过设置bean的scope属性为prototype实现多例。<br/>
在关联的Bean中我们通过设置<lookup-method>来实现多例注入。</p>

<h3 id="toc_5">bean之间关系</h3>

<ol>
<li>继承：可以通过设置Abstract类型的Bean来设置某一类Bean的共用参数，继承bean设置parent属性即可。</li>
<li>依赖：通过设置bean的depends-on属性来设置依赖</li>
<li>引用：见上部</li>
</ol>

<h3 id="toc_6">bean的作用范围</h3>

<ol>
<li>singleton:Spring Ioc容器中仅有一个bean实例，以单例的方式存在</li>
<li>prototype:每次容器调用Bean时，都返回一个新的实例</li>
<li>request:每次Http请求时都会创建一个新的实例</li>
<li>session:同一个Http Session共享一个Bean</li>
<li>global session：同一个全局Session共享一个bean，一般用于portlet应用环境</li>
<li>application:同一个Application共享一个bean</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java康复性训练——MyBatis3(3)]]></title>
    <link href="http://swuzjb.github.io/14689923975384.html"/>
    <updated>2016-07-20T13:26:37+08:00</updated>
    <id>http://swuzjb.github.io/14689923975384.html</id>
    <content type="html"><![CDATA[
<p>接上篇，继续对Mybatis的使用进行介绍。</p>

<blockquote>
<p>代码展示：<a href="https://github.com/swuzjb/MybatisDemo">Github地址</a></p>
</blockquote>

<h2 id="toc_0">动态SQL</h2>

<p>在实际开发过程中，静态的SQL写法并没有什么灵活性。当我们对User进行检索时，可能是依据id，role，username等等参数，如果使用静态SQL语句，我们就需要重复写大量的代码。为了解决这类问题，我们引入动态SQL。</p>

<p>Mybatis对动态SQL有很不错的支持，增加了很多扩展。</p>

<h3 id="toc_1">IF标签</h3>

<p>当我们开发过程中，遇到上述的多条件或指定条件查询时，我们可以使用IF标签来扩展。<br/>
以实现一个用户检索为例：</p>

<ol>
<li>在UserMapper接口中定义查询方法：<code>public List&lt;User&gt; searchUser(Map&lt;String, Object&gt; searchMap);</code></li>
<li><p>在UserMapper.xml中对接口进行实现：</p>

<pre><code class="language-xml">    &lt;select id=&quot;searchUser&quot; parameterType=&quot;Map&quot; resultMap=&quot;UserResult&quot;&gt;
    select * from user where 1=1
    &lt;if test=&quot;username!=null&quot;&gt;
        and username like #{username}
    &lt;/if&gt;
    &lt;if test=&quot;id!=null&quot;&gt;
        and id=#{id}
    &lt;/if&gt;
    &lt;if test=&quot;role!=null&quot;&gt;
        and roleId=#{role.id}
    &lt;/if&gt;
&lt;/select&gt;
</code></pre></li>
<li><p>调用查询，传入查询条件的Map即可。</p>

<pre><code class="language-java">public void testSearch(){
    Role role = new Role();
    role.setId(1);
    Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();
    map.put(&quot;role&quot;, role);  
    List&lt;User&gt; userList = userMapper.searchUser(map);
    for(User user:userList){
        System.out.println(user);
    }   
}
</code></pre></li>
</ol>

<h3 id="toc_2">Choose、when和otherwise标签</h3>

<p>上面的IF标签类似于我们结构控制的IF语句，那么现在介绍的这个标签就类似于我们的结构控制中的Switch-Case语句。<br/>
当我们需要对条件进行限制的时候，我们就可以使用这个标签。标签的结构如下：</p>

<pre><code class="language-xml">&lt;choose&gt;
    &lt;when test=&quot;&quot;&gt;&lt;/when&gt;
    &lt;when test=&quot;&quot;&gt;&lt;/when&gt;
    &lt;otherwise&gt;&lt;/otherwise&gt;
&lt;/choose&gt;
</code></pre>

<h3 id="toc_3">where标签</h3>

<p>where条件是对Where语句的一个优化，可以自动给SQL语句加上Where。如果Where子句以and或者or开头时，则自动删除第一个and或or。</p>

<pre><code class="language-xml">    &lt;select id=&quot;searchUser&quot; parameterType=&quot;Map&quot; resultMap=&quot;UserResult&quot;&gt;
        select * from user 
        &lt;where&gt;
            &lt;if test=&quot;username!=null&quot;&gt;
                and username like #{username}
            &lt;/if&gt;
            &lt;if test=&quot;id!=null&quot;&gt;
                and id=#{id}
            &lt;/if&gt;
            &lt;if test=&quot;role!=null&quot;&gt;
                and roleId=#{role.id}
            &lt;/if&gt;
        &lt;/where&gt;
    &lt;/select&gt;
</code></pre>

<h3 id="toc_4">trim标签</h3>

<p>与where语句类似，给语句增加前后缀。</p>

<h3 id="toc_5">Foreach标签</h3>

<p>用于拼接SQL语句的in语句，对传入的集合进行遍历。集合名称collectionName，元素名称itemName，拼接时以<code>(</code>开始，以<code>）</code>结束，用<code>，</code>分割。</p>

<pre><code class="language-xml">&lt;foreach collection=&quot;collectionName&quot; item=&quot;itemName&quot; open=&quot;(&quot; close=&quot;)&quot; separator=&quot;,&quot;&gt;
#{itemName}
&lt;/foreach&gt;
</code></pre>

<h3 id="toc_6">set标签</h3>

<p>和where子句类似，用于update语句。可以自动加上set，并自动删除最后一个<code>，</code>。</p>

<pre><code class="language-xml">&lt;update id=&quot;updateUser&quot; parameterType=&quot;User&quot;&gt;
        update user 
        &lt;set&gt;
            &lt;if test=&quot;username!=null&quot;&gt;
                username=#{username},
            &lt;/if&gt;
            &lt;if test=&quot;password!=null&quot;&gt;
                password=#{password},
            &lt;/if&gt;
            &lt;if test=&quot;role!=null&quot;&gt;
                roleId=#{role.id},
            &lt;/if&gt;
        &lt;/set&gt;
        where id=#{id}
&lt;/update&gt;
</code></pre>

<h3 id="toc_7">处理CLOB、BLOB类型数据</h3>

<ul>
<li>BLOB映射为<code>byte[]</code>,CLOB映射为<code>String</code>。</li>
<li>数据插入和读取时，参照对应的映射类型进行处理即可。</li>
</ul>

<h3 id="toc_8">传入多个输入参数</h3>

<ul>
<li>使用<code>&lt;key,value&gt;</code>键值对的Map进行传递</li>
<li>在SQL拼接时，直接使用#{param1}、#{param2}...来获取</li>
</ul>

<h3 id="toc_9">MyBatis分页</h3>

<ul>
<li>逻辑分页，即把所有的数据加入内存，每次取出若干条。通过<code>RowBounds</code>对象即可实现（需要指定offset,limit两个值）</li>
<li>物理分页，使用limit子句来实现分页</li>
</ul>

<h3 id="toc_10">MyBatis缓存</h3>

<p>MyBatis默认情况下，启用一级缓存，即同一个SqlSession接口对象调用了相同的select语句，则直接会从缓存中返回结果，而不再查询一次数据库。<br/>
开发者可以自己配置二级缓存，二级缓存是全局的。默认情况下，select使用缓存，insert、update、delete不使用缓存。</p>

<h3 id="toc_11">使用注解配置SQL映射器</h3>

<h4 id="toc_12">基本映射语句</h4>

<ol>
<li>@Insert：声明在插入的接口上方，参数为sql语句，和XML配置时相同；</li>
<li>@Update：同上；</li>
<li>@delete：同上；</li>
<li>@select：简单的返回单个对象时，和在查询方法上配置sql语句即可。</li>
<li><p>@select：当需要返回集合时：</p>

<pre><code class="language-java">@Select(&quot;select * from user where id=#{id}&quot;)
@Results({
    @Result(id=true,column=&quot;id&quot;,property=&quot;id&quot;),
    @Result(column=&quot;username&quot;,property=&quot;username&quot;),
    @Result(column=&quot;password&quot;,property=&quot;password&quot;),
})
public User getUserById(Integer id);
</code></pre></li>
</ol>

<h4 id="toc_13">关系映射</h4>

<ol>
<li><p>一对一映射：<code>@Result(column=&quot;roleId&quot;,property=&quot;role&quot; one=@One(select=&quot;site.zhanjingbo.mapper.RoleMapper.getRoleById&quot;))</code>;</p></li>
<li><p>一对多： <code>@Result(column=&quot;id&quot;,property=&quot;userList&quot; many=@Many(select=&quot;site.zhanjingbo.mapper.StudentMapper.getUserbyRole&quot;))</code></p></li>
</ol>

<h4 id="toc_14">动态SQL</h4>

<p>实现比较复杂，建议使用XML实现。使用注解效果不是很好。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java康复性训练——MyBatis3(2)]]></title>
    <link href="http://swuzjb.github.io/14689148951216.html"/>
    <updated>2016-07-19T15:54:55+08:00</updated>
    <id>http://swuzjb.github.io/14689148951216.html</id>
    <content type="html"><![CDATA[
<p>接上篇，继续对Mybatis的使用进行介绍。</p>

<blockquote>
<p>代码展示：<a href="https://github.com/swuzjb/MybatisDemo">Github地址</a></p>
</blockquote>

<h2 id="toc_0">Mapper的XML配置</h2>

<p>上一篇的文章当中UserMapper接口只定义了一个addUser的方法。这次我们首先先完善这个接口类。添加写、改、删、查这些方法。</p>

<pre><code class="language-java">package site.zhanjingbo.mapper;

import java.util.List;

import site.zhanjingbo.model.User;

public interface UserMapper {
    public int addUser(User user);
    public int updateUser(User user);
    public int deleteUser(Integer id);
    
    public User getUserById(Integer id);
    public List&lt;User&gt; getAllUser();
    
}
</code></pre>

<h3 id="toc_1">添加XML配置</h3>

<p>配置文件如下：</p>

<pre><code class="language-xml">    &lt;insert id=&quot;addUser&quot; parameterType=&quot;User&quot; useGeneratedKeys=&quot;true&quot; &gt;
        insert into user(username,password) values(#{username},#{password}) 
    &lt;/insert&gt;
</code></pre>

<h3 id="toc_2">修改XML配置</h3>

<pre><code class="language-xml">    &lt;update id=&quot;updateUser&quot; parameterType=&quot;User&quot;&gt;
        update user set username=#{username},password=#{password} where id=#{id}
    &lt;/update&gt;
</code></pre>

<h3 id="toc_3">删除XML配置</h3>

<pre><code class="language-xml">    &lt;delete id=&quot;deleteUser&quot; parameterType=&quot;Integer&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
</code></pre>

<h3 id="toc_4">查询XML配置</h3>

<ol>
<li><p>返回单个对象。(注意:对象一定要有对应的构造方法或无参构造)</p>

<pre><code class="language-xml">&lt;select id=&quot;getUserById&quot; parameterType=&quot;Integer&quot; resultType=&quot;User&quot;&gt;
    select * from user where id=#{id}
&lt;/select&gt;
</code></pre></li>
<li><p>返回结构List。</p>

<ol>
<li><p>先声明一个返回类型</p>

<pre><code class="language-xml">&lt;resultMap type=&quot;User&quot; id=&quot;UserList&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;username&quot; column=&quot;username&quot;/&gt;
    &lt;result property=&quot;password&quot; column=&quot;password&quot;/&gt;
&lt;/resultMap&gt;
</code></pre></li>
<li><p>声明SQL语句映射</p>

<pre><code class="language-xml">&lt;select id=&quot;getAllUser&quot; resultMap=&quot;UserList&quot;&gt;
    select * from user
&lt;/select&gt;
</code></pre></li>
</ol></li>
</ol>

<h2 id="toc_5">关系映射</h2>

<h3 id="toc_6">一对一关系</h3>

<p>为了更好的展示，我们给User添加一个Role的属性，也就是角色属性。</p>

<ol>
<li><p>建立Role的POJO对象</p>

<pre><code class="language-java">package site.zhanjingbo.model;
public class Role {
    private Integer id;
    private String roleName;

    public Role(){
        super();
    }
    public Role(Integer id, String roleName) {
        super();
        this.id = id;
        this.roleName = roleName;
    }

    public Integer getId() {
        return id;
    }
    public void setId(Integer id) {
        this.id = id;
    }
    public String getRoleName() {
        return roleName;
    }
    public void setRoleName(String roleName) {
        this.roleName = roleName;
    }

    @Override
    public String toString() {
        return &quot;Role [id=&quot; + id + &quot;, roleName=&quot; + roleName + &quot;]&quot;;
    }
}
</code></pre></li>
<li><p>建立Role的Mapper接口</p>

<pre><code class="language-java">package site.zhanjingbo.mapper;

import site.zhanjingbo.model.Role;

public interface RoleMapper {
    public Role getRoleById(Integer id);
}
</code></pre></li>
<li><p>建立Role的Mapper映射文件（注：这里使用的Role 实在config文件中设置了别名）</p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
  PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
  &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;site.zhanjingbo.mapper.RoleMapper&quot;&gt;
    &lt;select id=&quot;getRoleById&quot; parameterType=&quot;Integer&quot;  resultType=&quot;Role&quot;&gt;
        select * from role where id=#{id}
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre></li>
<li><p>修改User的Mapper映射文件，主要修改查询语句的相关返回，设置resultMap为UserResult，其声明如下：</p>

<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
  PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
  &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;site.zhanjingbo.mapper.UserMapper&quot;&gt;  
    &lt;resultMap type=&quot;User&quot; id=&quot;UserResult&quot;&gt;
        &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
        &lt;result property=&quot;username&quot; column=&quot;username&quot;/&gt;
        &lt;result property=&quot;password&quot; column=&quot;password&quot;/&gt;
        &lt;association property=&quot;role&quot; column=&quot;roleId&quot; select=&quot;site.zhanjingbo.mapper.RoleMapper.getRoleById&quot;&gt;&lt;/association&gt;
    &lt;/resultMap&gt;

    &lt;insert id=&quot;addUser&quot; parameterType=&quot;User&quot; useGeneratedKeys=&quot;true&quot; &gt;
        insert into user(username,password) values(#{username},#{password}) 
    &lt;/insert&gt;
    &lt;update id=&quot;updateUser&quot; parameterType=&quot;User&quot;&gt;
        update user set username=#{username},password=#{password} where id=#{id}
    &lt;/update&gt;
    &lt;delete id=&quot;deleteUser&quot; parameterType=&quot;Integer&quot;&gt;
        delete from user where id=#{id}
    &lt;/delete&gt;
    &lt;select id=&quot;getUserById&quot; parameterType=&quot;Integer&quot; resultMap=&quot;UserResult&quot;&gt;
        select * from user where id=#{id}
    &lt;/select&gt;
    &lt;select id=&quot;getAllUser&quot; resultMap=&quot;UserResult&quot;&gt;
        select * from user
    &lt;/select&gt;
&lt;/mapper&gt;
</code></pre></li>
</ol>

<h3 id="toc_7">一对多关系</h3>

<p>一对多关系其实是扩展的一对一关系，我们在这一部分对上面的Role实体进行扩展。在上面我们定义一个用户只能有一个角色，但是一个角色其实可以有多个用户。这就构成了一对多。<br/>
为了展示一对多，我们增加一个根据用户角色查询用户的功能。</p>

<ol>
<li>需要在UserMapper中添加一个根据Role返回User List的方法。</li>
<li>在UserMapper.xml中完善这个方法的SQL语句</li>
<li>在Role中增加UserList属性，并添加getter和setter方法</li>
<li><p>在RoleMapper.xml中增加配置。如下代码展示</p>

<pre><code class="language-xml"> &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;site.zhanjingbo.mapper.RoleMapper&quot;&gt;
&lt;resultMap type=&quot;Role&quot; id=&quot;RoleResult&quot;&gt;
    &lt;id property=&quot;id&quot; column=&quot;id&quot;/&gt;
    &lt;result property=&quot;roleName&quot; column=&quot;roleName&quot;/&gt;
    &lt;collection property=&quot;userList&quot; column=&quot;id&quot; select=&quot;site.zhanjingbo.mapper.UserMapper.getUserByRole&quot;&gt;&lt;/collection&gt;
&lt;/resultMap&gt;
&lt;select id=&quot;getRoleById&quot; parameterType=&quot;Integer&quot;  resultMap=&quot;RoleResult&quot;&gt;
    select * from role where id=#{id}
&lt;/select&gt;
&lt;/mapper&gt;
</code></pre></li>
</ol>

<h3 id="toc_8">多对多关系</h3>

<p>多对多关系可以理解为双向的一对多关系，参照上方的一对多实现，关联中间表即可。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java康复性训练——MyBatis3(1)]]></title>
    <link href="http://swuzjb.github.io/14687533604786.html"/>
    <updated>2016-07-17T19:02:40+08:00</updated>
    <id>http://swuzjb.github.io/14687533604786.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">MyBatis</h2>

<blockquote>
<p>MyBatis是一个支持普通SQL查询，存储过程和高级映射的优秀持久层框架。MyBatis消除了几乎所有的JDBC代码和参数的手工设置以及对结果集的检索封装。MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录。</p>
</blockquote>

<h2 id="toc_1">MyBatis3使用-Hell,World项目</h2>

<p>MyBatis3的使用比较简单。新建一个基本的Mybatis项目需要如下步骤：</p>

<ol>
<li>新建一个Java项目（这句是废话）。</li>
<li>导入相关Jar包。

<ol>
<li>JDBC相关包：mysql-connector-java-5.1.39-bin.jar</li>
<li>MyBatis核心包：mybatis-3.4.1.jar</li>
</ol></li>
<li><p>创建Mybatis配置文件：mybatis-config.xml 位于src目录下</p>

<pre><code class="language-xml">    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
    &lt;!DOCTYPE configuration
      PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;
      &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;
    &lt;configuration&gt;

      &lt;!--  引入相关JDBC配置文件 --&gt;
      &lt;properties  resource=&quot;jdbc.properties&quot;/&gt;

      &lt;!-- 配置Mybatis运行的数据库环境 --&gt;
      &lt;environments default=&quot;development&quot;&gt;
            &lt;environment id=&quot;development&quot;&gt;
                  &lt;transactionManager type=&quot;JDBC&quot;/&gt;
                  &lt;dataSource type=&quot;POOLED&quot;&gt;
                    &lt;property name=&quot;driver&quot; value=&quot;${jdbc.driverClassName}&quot;/&gt;
                    &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot;/&gt;
                    &lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot;/&gt;
                    &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;/&gt;
                  &lt;/dataSource&gt;
            &lt;/environment&gt;
      &lt;/environments&gt;

      &lt;!-- 对象与数据库映射文件 --&gt;
      &lt;mappers&gt;
        &lt;mapper resource=&quot;site/zhanjingbo/mapper/UserMapper.xml&quot;/&gt;
      &lt;/mappers&gt;
    &lt;/configuration&gt;
</code></pre></li>
<li><p>创建JDBC配置文件:jdbc.properties。（也可直接在上文配置）</p>

<pre><code class="language-txt">jdbc.dirverClassName=com.mysql.jdbc.Dirver
jdbc.url=jdbc:mysql://localhost:3307/user
jdbc.username=root
jdbc.password=

</code></pre></li>
<li><p>创建MyBatis的连接工厂类:</p>

<pre><code class="language-Java">package site.zhanjingbo.util;
import java.io.IOException;
import java.io.InputStream;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

public class SqlSessionFactoryUtil {
    private static SqlSessionFactory sqlSessionFactory; 
    private static SqlSessionFactory getSqlSessionFactory(){

        if(sqlSessionFactory == null){
            InputStream is = null;
            try {
                is = Resources.getResourceAsStream(&quot;mybatis-config.xml&quot;);
                sqlSessionFactory = new SqlSessionFactoryBuilder().build(is);
            } catch (IOException e) {
                // TODO Auto-generated catch block
                System.out.println(&quot;配置文件加载失败&quot;);
                e.printStackTrace();
            }
        }
        return sqlSessionFactory;
    }
    public static SqlSession openSession(){
        return getSqlSessionFactory().openSession();
    }
}
</code></pre></li>
<li><p>创建实体数据库访问<em>接口</em>：</p>

<pre><code class="language-java">package site.zhanjingbo.dao;
import site.zhanjingbo.model.User;
public interface UserMapper {
    public int addUser(User user);
}
</code></pre></li>
<li><p>创建映射Mapper配置文件</p>

<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace=&quot;site.zhanjingbo.mapper.UserMapper&quot;&gt;
    &lt;insert id=&quot;addUser&quot; parameterType=&quot;site.zhanjingbo.model.User&quot;&gt;
        insert into user(username,password) values(#{username},#{password}) 
    &lt;/insert&gt;
&lt;/mapper&gt;
</code></pre></li>
<li><p>创建测试类 </p>

<pre><code class="language-java"> package site.zhanjingbo.test;
 import org.apache.ibatis.session.SqlSession;
 import site.zhanjingbo.mapper.UserMapper;
 import site.zhanjingbo.model.User;
 import site.zhanjingbo.util.SqlSessionFactoryUtil;
 public class MyBatisTest {
    public static void main(String[] args) {
        //获取SqlSession实例
        SqlSession sqlSession = SqlSessionFactoryUtil.openSession();
        //根据sqlSession生成对应的Mapper对象
        UserMapper userDao = sqlSession.getMapper(UserMapper.class);

        User user = new User(&quot;test&quot;, &quot;123&quot;);
        int flag = userDao.addUser(user);

        if(flag &gt; 0){
            System.out.println(&quot;添加成功&quot;);
        }

        //提交事务
        sqlSession.commit();
        //关闭SQLSession
        sqlSession.close();

    }
}
</code></pre></li>
</ol>

<h2 id="toc_2">Mybatis-Config.xml配置文件</h2>

<p>本部分简要描述一下Mybatis-config配置文件的各项内容。<br/>
<code>&lt;configuration&gt;&lt;/configuration&gt;</code>是配置文件xml的根节点，所有配置项都其中。主要包含以下几项：</p>

<h3 id="toc_3">properties参数配置</h3>

<ul>
<li>properties主要包含各类配置信息，可以直接引入properties文件。也可以直接设置键值对。</li>
<li><code>&lt;properties  resource=&quot;jdbc.properties&quot;/&gt;</code> 通过resource来指定配置文件</li>
<li><p>直接写入键值对，写法</p>

<pre><code class="language-xml">&lt;properties&gt;
    &lt;property name=&quot;jdbc.dirverCLassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;
 &lt;/properties&gt;
</code></pre></li>
</ul>

<h3 id="toc_4">environments 环境配置</h3>

<p>MyBatis支持多环境配置。可以同时配置多个数据库信息。用<code>&lt;environment&gt;</code>标签表示。</p>

<h4 id="toc_5">environment标签</h4>

<p>每一对<code>&lt;environment&gt;&lt;/environment&gt;</code>标签标示一个数据库环境信息。包含transactionManager、dataSource两个子节点。<br/>
样例代码：</p>

<pre><code class="language-xml">&lt;environments default=&quot;development&quot;&gt;
        &lt;environment id=&quot;development&quot;&gt;
              &lt;transactionManager type=&quot;JDBC&quot;/&gt;
              &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;${jdbc.dirverClassName}&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;/&gt;
              &lt;/dataSource&gt;
        &lt;/environment&gt;
        &lt;environment id=&quot;test&quot;&gt;
            &lt;transactionManager type=&quot;JDBC&quot;/&gt;
            &lt;dataSource type=&quot;POOLED&quot;&gt;
                &lt;property name=&quot;driver&quot; value=&quot;${jdbc.dirverClassName}&quot;/&gt;
                &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot;/&gt;
                &lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot;/&gt;
                &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;/&gt;
              &lt;/dataSource&gt;
        &lt;/environment&gt;
 &lt;/environments&gt;
</code></pre>

<h5 id="toc_6">transactionManager事务管理方式</h5>

<p>MyBatis支持两种类型的事务管理器：JDBC和MANAGED(托管)：</p>

<ul>
<li>JDBC：应用程序负责管理数据库连接的声明周期</li>
<li>MANAGED：由应用服务器管理数据库连接的声明周期。（一般商业服务器才有此功能，如JBOSS，WebLogic）</li>
<li><code>&lt;transactionManager type=&quot;JDBC&quot;/&gt;</code></li>
</ul>

<h5 id="toc_7">dataSource数据源</h5>

<p>用来配置数据库数据源信息。类型分为：UNPOOLED,POOLED,JNDI：</p>

<ul>
<li>UNPOOLED：没有连接池，每次数据库操作MyBatis都会新建一个数据库连接，用完后，关闭。适合小并发项目。</li>
<li>POOLED：启用连接池</li>
<li>JNDI：使用服务器配置JNDI数据源获取数据库连接</li>
</ul>

<h3 id="toc_8">typeAliases</h3>

<p>类型别名，通过设置该项目可以给类的完整限定名取别名，方便使用。<br/>
如在上面部分 UserMapper.xml中addUser的参数类别写为<code>site.zhanjingbo.model.User</code>。不方便使用。我们可以在Mybatis-config.xml中加入如下代码：</p>

<pre><code class="language-xml">&lt;typeAliases&gt;
    &lt;typeAlias type=&quot;site.zhanjingbo.model.User&quot; alias=&quot;User&quot;/&gt;
&lt;/typeAliases&gt;
</code></pre>

<p>便可以使用<em>User</em>来指代<em>site.zhanjingbo.model.User</em>。</p>

<h3 id="toc_9">Mappers映射</h3>

<p>用于引入Mapper映射文件。有三种比较推荐的配置方式，如下代码：</p>

<pre><code class="language-xml">  &lt;mappers&gt;
    &lt;mapper resource=&quot;site/zhanjingbo/dao/UserMapper.xml&quot;/&gt;
    &lt;mapper class=&quot;site.zhanjingbo.dao.UserMapper&quot;/&gt;
    &lt;!-- 包含这个包下的所有 --&gt;
    &lt;package name=&quot;site.zhanjingbo.dao&quot;/&gt;
  &lt;/mappers&gt;
</code></pre>

<p>示例代码见：<a href="https://github.com/swuzjb/MybatisDemo">https://github.com/swuzjb/MybatisDemo</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java康复性训练-JDBC]]></title>
    <link href="http://swuzjb.github.io/14686724239639.html"/>
    <updated>2016-07-16T20:33:43+08:00</updated>
    <id>http://swuzjb.github.io/14686724239639.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">什么是JDBC</h2>

<blockquote>
<p>JDBC(Java Data Base Connectivity，Java数据库链接)是一种用于执行SQL语句的Java API。可以为多种关系数据库提供统一的访问，它由一组Java语言编写的类和接口组成。JDBC提供了一种标准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。</p>
</blockquote>

<h3 id="toc_1">JDBC原理</h3>

<p>JDBC原理：JDBC是以前SUN公司定义的一套访问数据库的接口（没有具体实现），具体实现是由各大数据库厂商自己实现的。每个数据库厂商都有自己的JDBC实现，也被称为JDBC驱动实现类。Java应用程序连接指定数据库，需要使用厂家提供的JDBC驱动才能连接。<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-07-16-14686740816527.jpg" alt=" " class="mw_img_center" style="display: block; clear:both; margin: 0 auto;"/></p>

<h2 id="toc_2">JDBC链接数据库步骤</h2>

<ol>
<li>加载驱动</li>
<li>链接数据库</li>
<li>使用语句操作数据库</li>
<li>关闭数据库，释放资源</li>
</ol>

<h3 id="toc_3">在项目中配置数据库驱动（Eclipse）</h3>

<p>右击项目-&gt;Build Path-&gt;Configure Build Path-&gt; Add External JARS</p>

<h3 id="toc_4">加载JDBC驱动</h3>

<p>MySQL JDBC 驱动名称：<em>com.mysql.jdbc.Driver</em><br/>
加载方式：<code>Class.forName(&quot;驱动名&quot;);</code></p>

<h3 id="toc_5">连接及关闭数据库</h3>

<ol>
<li><p>DriverManager 驱动管理类，主要负责一个数据的连接。<code>static Connection getConnection(String url, String user, String password)</code>试图建立到给定数据库 URL 的连接。</p></li>
<li><p>Mysql 数据的连接地址格式：</p>

<ul>
<li>jdbc:mysql://127.0.0.1:3306/DataBaseName</li>
<li>jdbc协议：JDBC URL 中的协议总是jdbc</li>
<li>子协议： 驱动程序名称或数据库连接机制（这种驱动可由一个或多个驱动程序支持）的名称如：mysql</li>
<li>子名称：一种标示数据库的方法。必须遵循<em>//主机名：端口/数据库</em>的标准URL命名约定，如：<code>//localhost:3306/test</code></li>
</ul></li>
<li><p>Connection接口：与特定的数据库的连接(也称为会话)。</p>

<ul>
<li><code>void close()</code>立即释放此Connection对象的数据库和JDBC资源，而不是等待自动释放</li>
</ul></li>
</ol>

<h4 id="toc_6">Demo Code</h4>

<p>封装一个用于获取和关闭连接的工具类DBTool。</p>

<pre><code class="language-Java">package com.swu.JDBC;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBTool {
    public static Connection getConnection(){
        String dbURL = &quot;jdbc:mysql://localhost:3306/test&quot;;
        String username = &quot;root&quot;;
        String password = &quot;&quot;;
        Connection conn = null;
        try {
            //注册驱动类
            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);
            //获取连接
            conn = DriverManager.getConnection(dbURL,username,password);
            
        } catch (ClassNotFoundException e) {
            // TODO Auto-generated catch block
            System.out.println(&quot;加载驱动失败&quot;);
            e.printStackTrace();
        } catch (SQLException e) {
            System.out.println(&quot;连接失败&quot;);
            e.printStackTrace();
        }
        return conn;
    }
    public static void closeConnection(Connection conn){
        try {
            conn.close();
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            System.out.println(&quot;关闭失败&quot;);
            e.printStackTrace();
        }
    }
}

</code></pre>

<h2 id="toc_7">使用Statement接口实现数据的增、删、改、查</h2>

<h3 id="toc_8">Statement接口</h3>

<ul>
<li>作用：用于执行静态SQL语句并返回它所产生的结果的对象。</li>
<li><code>int executeUpdate(String sql)</code> 执行给定SQL语句。该语句可能为INSERT,UPDATE,DELETE语句或者不返回人格内容的SQL语句。</li>
<li><code>void close()</code> 立即释放此Statement对象的数据库和JDBC资源，而不是等待对象自动关闭时发生此操作。</li>
</ul>

<h4 id="toc_9">Statement接口实现添加数据操作</h4>

<p>demo如下：</p>

<pre><code class="language-java">public void addUser(String username,String password){
        Connection conn = DBTool.getConnection();
        String sql = &quot;insert into user(username,password) values(&#39;&quot;+username+&quot;&#39;,&#39;&quot;+password+&quot;&#39;)&quot;;
        Statement stmt = null;
        try {
            //通过Connection获取Statement
            stmt = conn.createStatement();
            int result = stmt.executeUpdate(sql);
            System.out.println(result);
        } catch (SQLException e) {
            e.printStackTrace();
        }finally {
            try {
                stmt.close();
                DBTool.closeConnection(conn);
            } catch (SQLException e) {
                e.printStackTrace();
            }
            
        }
    }
</code></pre>

<h4 id="toc_10">Statement接口实现修改数据操作</h4>

<p>demo如下：</p>

<pre><code class="language-java">    public void updateUser(int id,String username,String password){
        Connection conn = DBTool.getConnection();
        String sql = &quot;update user set username=&#39;&quot;+username+&quot;&#39;,password=&#39;&quot;+password+&quot;&#39; where id=&quot;+id;
        Statement stmt = null;
        try {
            //通过Connection获取Statement
            stmt = conn.createStatement();
            int result = stmt.executeUpdate(sql);
            System.out.println(result);
        } catch (SQLException e) {
            e.printStackTrace();
        }finally {
            try {
                stmt.close();
                DBTool.closeConnection(conn);
            } catch (SQLException e) {              e.printStackTrace();
            }
            
        }
    }
</code></pre>

<h4 id="toc_11">Statement接口实现删除数据操作</h4>

<p>demo如下：</p>

<pre><code class="language-java">    public void deleteUser(int id){
        Connection conn = DBTool.getConnection();
        String sql = &quot;delete from user where id=&quot;+id;
        Statement stmt = null;
        try {
            //通过Connection获取Statement
            stmt = conn.createStatement();
            int result = stmt.executeUpdate(sql);
            System.out.println(result);
        } catch (SQLException e) {
            e.printStackTrace();
        }finally {
            try {
                stmt.close();
                DBTool.closeConnection(conn);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
</code></pre>

<h4 id="toc_12">Statment接口实现数据查询</h4>

<p>demo如下（里面的ResultSet后面详细介绍）:</p>

<pre><code class="language-java">public void getAllUser(){
        Connection conn = DBTool.getConnection();
        String sql = &quot;select * from user&quot;;
        Statement stmt = null;
        //保存查询返回结果
        ResultSet rs = null;
        try {
            stmt = conn.createStatement();
            rs = stmt.executeQuery(sql);
            while(rs.next()){
                System.out.println(rs.getInt(1)+&quot;\t&quot;+rs.getString(2)+&quot;\t&quot;+rs.getString(3));
            }
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }finally {
            try {
                rs.close();
                stmt.close();
                conn.close();
            } catch (SQLException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            
        }
}
</code></pre>

<h3 id="toc_13">PreparedStatement接口</h3>

<p>PreparedStatement是Statement的子接口，是一个SQL语句预处理Statement。与直接Statement不同的是PreparedStatement在操作时，是先在数据表中准备好了一条SQL语句，但是此SQL语句的内容暂时不设置，而是之后再进行设置。<em>实际开发过程中建议使用PreparedStatement，可以避免一定的SQL注入问题</em></p>

<h4 id="toc_14">PreparedStatement接口实现数据添加</h4>

<p>demo如下:</p>

<pre><code class="language-java">    public void addUser(String username,String password) throws Exception{
        //预处理SQL语句
        String sql = &quot;insert into user(username,password) values(?,?)&quot;;
        Connection conn = DBTool.getConnection();
        //获得PreparedStatement对象
        PreparedStatement stmt = conn.prepareStatement(sql);
        //设置预处理占位符的实际值
        stmt.setString(1, username);
        stmt.setString(2, password);
        //执行添加
        stmt.executeUpdate();
        
        DBTool.closeConnection(stmt, conn);
    }
</code></pre>

<h4 id="toc_15">PreparedStatement接口实现数据修改</h4>

<p>demo如下：</p>

<pre><code class="language-java">    public void updateUser(int id,String username,String password) throws SQLException{
        String sql = &quot;update user set username=?,password=? where id=?&quot;;
        Connection conn = DBTool.getConnection();
        PreparedStatement stmt = conn.prepareStatement(sql);
        
        stmt.setString(1, username);
        stmt.setString(2, password);
        stmt.setInt(3, id);
        
        stmt.executeUpdate();
        
        DBTool.closeConnection(stmt, conn);
        
    }
</code></pre>

<h3 id="toc_16">PreparedStatement接口实现数据删除</h3>

<p>demo如下：</p>

<pre><code class="language-java">    public void deleteUser(int id) throws SQLException{
        String sql = &quot;delete from user where id = ?&quot;;
        Connection conn = DBTool.getConnection();
        PreparedStatement stmt = conn.prepareStatement(sql);
        
        stmt.setInt(1, id);
    
        stmt.executeUpdate();
        
        DBTool.closeConnection(stmt, conn);
    }
</code></pre>

<h4 id="toc_17">PreparedStatement接口实现数据查询</h4>

<p>demo如下：</p>

<pre><code class="language-java">    public void getUserByUsername(String username) throws SQLException{
        String sql = &quot;select * from user where username=?&quot;;
        Connection conn = DBTool.getConnection();
        PreparedStatement stmt = conn.prepareStatement(sql);
        
        stmt.setString(1, username);
    
        ResultSet rs = stmt.executeQuery();
        
        while(rs.next()){
            System.out.println(rs.getInt(1)+&quot;\t&quot;+rs.getString(2)+&quot;\t&quot;+rs.getString(3));
        }
        
        DBTool.closeConnection(stmt, conn);
    }
</code></pre>

<h3 id="toc_18">ResultSet结果集</h3>

<blockquote>
<p>当我们对数据库的数据进行查询的时候，返回的是一个二维的结果集。我们这个时候需要使用ResultSet来遍历结果集，获取每一行的数据。</p>
</blockquote>

<h4 id="toc_19">获取数据</h4>

<ul>
<li><code>boolean next()</code>将光标从当前位置向前移动一行</li>
<li><code>String getString(int columnIndex)</code>以String的形式获取此ResultSet对象的当前行中指定列的值。</li>
<li><code>String getString(String columnLabel)</code>以String的形式获取此ResultSet对象的当前行中指定列的值。</li>
</ul>

<h4 id="toc_20">使用例子</h4>

<p>见上方实现的数据查询。</p>

<h3 id="toc_21">处理大数据对象</h3>

<blockquote>
<p>大数据对象处理主要有CLOB(character large object)和BLOB(binary large object)两种类型的字段。在CLOB中可以存储大字符数据对象，比如长篇小说;在BLOB中可以存放二进制大数据对象，比如图片、电影、音乐</p>
</blockquote>

<h4 id="toc_22">处理CLOB数据</h4>

<ul>
<li>使用PreparedStatement插入数据。<code>statement.setAsciiStream(parameterIndex, x, length);</code></li>
<li>使用ResultSet读取数据。<code>resultSet.getClob(String columnLabel);</code>获得一个Clob对象，然后可以转为字符串对象。</li>
</ul>

<h4 id="toc_23">处理BLOB数据</h4>

<ul>
<li>使用PreparedStatement插入数据。<code>statement.setBinaryStream(parameterIndex, x, length);</code></li>
<li>使用ResultSet读取数据。<code>resultSet.getBlob(String columnLabel);</code>获得一个Blob对象，然后可以转为目标对象。</li>
</ul>

<h3 id="toc_24">使用CallableStatement接口调用存储过程</h3>

<blockquote>
<p>CallableStatement 主要是调用数据库中的存储过程,CallableStatement 也是 Statement 接口的子接口。在使用 CallableStatement 时可以接收存储过程的返回值。 </p>
</blockquote>

<h3 id="toc_25">使用DatabaseMetaData分析数据库</h3>

<blockquote>
<p>DatabaseMetaData可以得到数据库的一些基本信息,包括数据库的名称、版本,以及得到表的信息。 </p>
</blockquote>

<ul>
<li><code>String getDatabaseProductName()</code> 获取此数据库产品的名称。</li>
<li><code>int getDriverMajorVersion()</code>获取此 JDBC 驱动程序的主版本号。</li>
<li><code>int getDriverMinorVersion()</code> 获取此 JDBC 驱动程序的次版本号。 </li>
</ul>

<h3 id="toc_26">使用 ResultSetMetaData 获取 ResultSet 对象中的信息</h3>

<blockquote>
<p>ResultSetMetaData 可获取关于 ResultSet 对象中列的基本信息;</p>
</blockquote>

<ul>
<li><code>int getColumnCount()</code> 返回此 ResultSet 对象中的列数。</li>
<li><code>String getColumnName(int column)</code> 获取指定列的名称。 </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java康复性训练——Java基础1]]></title>
    <link href="http://swuzjb.github.io/14676190809439.html"/>
    <updated>2016-07-04T15:58:00+08:00</updated>
    <id>http://swuzjb.github.io/14676190809439.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">开发环境搭建</h2>

<h3 id="toc_1">JDK的安装与配置</h3>

<ol>
<li>下载JavaSE版本的安装包。</li>
<li>双击安装，选定安装目录</li>
<li>配置环境变量

<ul>
<li>JAVA_HOME JDK的安装目录</li>
<li>path(在此项中添加)   %JAVA_HOME%\bin</li>
</ul></li>
</ol>

<h3 id="toc_2">开发工具eclipse</h3>

<p>下载地址：<a href="http://eclipse.org"></a></p>

<h2 id="toc_3">Hello Java</h2>

<pre><code class="language-java">
public class Hello {

    public static void main(String[] args) {
        System.out.println(&quot;Hello Java&quot;);
    }

}

</code></pre>

<h2 id="toc_4">输入</h2>

<p>利用Scanner扫描器对数据进行读取：<code>Scanner in = new Scanner(System.in);</code></p>

<h2 id="toc_5">变量</h2>

<p>变量来源于数学，是计算机语言中能储存计算结果或能表示值抽象概念。变量可以通过变量名访问。</p>

<p><code>int price = 0;</code>这一行定义了一个变量。变量的名字是price，类型是int，初始值是0。</p>

<p>Java是一种强类型语言，所有的变量在使用之前必须定义或声明，所有的变量必须具有确定的数据类型。数据类型表示在变量中可以存放什么样的数据，变量中只能存放指定类型的数据，程序运行过程中也不能改变变量的类型。</p>

<h2 id="toc_6">赋值</h2>

<p><code>=</code>在计算机中表示赋值。<code>A = B</code>表示将B的值赋给A。</p>

<h2 id="toc_7">浮点数</h2>

<p>两个整数的运算结果只能是整数。10和10.0在程序中是不一样的概念。<br/>
带小数点的数值。浮点这个词的本意就是指小数点是浮动的，是计算机内部表示非整数（包含分数和无理数）的一种方式。人们借用浮点数这个词来表示所有带小数点的数。</p>

<h2 id="toc_8">优先级</h2>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-07-05-14676900576214.jpg" alt=""/></p>

<h2 id="toc_9">类型转换</h2>

<p>就一个值得类型转变为新的类型并赋值给新的变量。</p>

<pre><code class="language-java">float a = 1.0;
int b = (int)a;
</code></pre>

<h2 id="toc_10">关系运算</h2>

<p>计算两个值之间的关系，叫做关系运算<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-07-06-14677691671515.jpg" alt=""/><br/>
判断两个浮点数是否相等</p>

<pre><code class="language-java">double a = 1.0;
double b = 0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1+0.1;
System.out.println(Math.abs(a-b)&lt;1e6);
</code></pre>

<h2 id="toc_11">IF语句</h2>

<p>一个基本的if语句由一个关键字if开头，跟上在括号里的一个表示条件的逻辑表达式，然后是一对大括号{}之间的若干条语句。如果表示条件的逻辑表达式的结果为true，那么就执行后面跟着的这对大括号中的语句，否则就跳过这些语句不执行，而继续执行下面的其他语句。</p>

<pre><code class="language-java">if(?){
    //do something
}else{
    //do something
}
</code></pre>

<h2 id="toc_12">多路分支（Switch-Case）</h2>

<pre><code class="language-java">switch (整型或字符型变量){
    case 变量可能值1: 
      　  分支一;
        　break;
   case 变量可能值2: 
      　  分支二;
        　break;
   case 变量可能值3: 
      　  分支三;
        　break;
   ...
   default:
       最后分支;
｝
</code></pre>

<h2 id="toc_13">循环</h2>

<h3 id="toc_14">while循环</h3>

<p>可能一次都不执行</p>

<pre><code class="language-java">while(true){
    //doSomthing..
}
</code></pre>

<h3 id="toc_15">do-while循环</h3>

<p>至少执行一次</p>

<pre><code class="language-java">do{
    //doSomething..
}while();
</code></pre>

<h3 id="toc_16">for循环</h3>

<pre><code class="language-java">for(int i = ?;i&lt;?;i++){
    //doSomething
}
</code></pre>

]]></content>
  </entry>
  
</feed>
