<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[展镜博的个人博客]]></title>
  <link href="http://swuzjb.github.io/atom.xml" rel="self"/>
  <link href="http://swuzjb.github.io/"/>
  <updated>2016-04-12T23:42:06+08:00</updated>
  <id>http://swuzjb.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[GeekBand.iOS-UIScrollView的使用]]></title>
    <link href="http://swuzjb.github.io/14604722520928.html"/>
    <updated>2016-04-12T22:44:12+08:00</updated>
    <id>http://swuzjb.github.io/14604722520928.html</id>
    <content type="html"><![CDATA[
<p>在日常开发过程中，我们需要展示的东西很有可能比手机的屏幕长，或者比屏幕宽，在这个时候如何展示？以及在有些情况下，我们应该允许用户对照片等view进行缩放操作。这些又如何实现呢？答案就是使用本文的主角UIScrollView。</p>

<h2 id="toc_0">什么是ScrollView</h2>

<p>能Scroll的View。即UIScrollView可以用于显示多于一个屏幕的内容，超出屏幕范围的内容可以通过滑动进行查看。效果如图所示:<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-12-14604727346930.jpg" alt=""/></p>

<h2 id="toc_1">UIScrollView的创建方式</h2>

<ol>
<li>在Interface Builder里面拖</li>
<li>使用代码创建:<code>scrollView = [[UIScrollView alloc] initWithFrame:rect];</code></li>
</ol>

<h2 id="toc_2">UIScrollView的尺寸</h2>

<ol>
<li>ScrollView自身的size，也就是自身的Frame，这个和其它View一样。</li>
<li>ScrollView有一个特殊的size属性，称之为contentSize，也是它的内容的大小，这个是必须指定的一个属性，否则ScrollView无法进行滑动等操作。指定contentSize的方式也有两种：

<ol>
<li>使用代码指定<code>scrollView.contentSize = CGSizeMake(&lt;#CGFloat width#&gt;, &lt;#CGFloat height#&gt;);</code></li>
<li>使用AutoLayout,约束必须可以计算出contentSize的大小才可以正常的往其内部添加子View。可以参考<a href="http://www.cocoachina.com/ios/20150104/10810.html">Storyboard中的UIScrollView使用自动布局，使其能够滚动</a>。
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-12-14604733972117.jpg" alt=""/></li>
</ol></li>
</ol>

<h2 id="toc_3">UIScrollView的滚动</h2>

<p>设置完成ScrollView之后，我们的ScrollView就可以进行滚动。与滚动有几个相关的属性或方法，介绍如下：</p>

<ol>
<li><code>BOOL scrollEnable</code>是否可以滚动</li>
<li><code>BOOL bounces</code>是否显示回弹效果</li>
<li><code>BOOL showsHorizontalScrollIndicator</code> 是否显示垂直滚动条</li>
<li><code>BOOL showsVerticalScrollIndicator</code>  是否显示水平滚动条</li>
<li><code>.contentOffset</code>是一个CGPoint，表示偏移的点
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-12-14604737957967.jpg" alt=""/></li>
</ol>

<h2 id="toc_4">监听滚动</h2>

<p>监听滚动需要对应的监听对象实现UIScrollViewDelegate协议。<br/>
具体的监听方法如下：</p>

<pre><code>// 只要 scrollView 滑动就会触发 ( 会触发多次 )
- (void)scrollViewDidScroll:(UIScrollView *)scrollView;                                               

//只要 scrollView 缩放就会触发
- (void)scrollViewDidZoom:(UIScrollView *)scrollView 

// 当将要拖拽 scrollView 时触发 , 手指接触 scrollView 并且将要滑动时触发
- (void)scrollViewWillBeginDragging:(UIScrollView *)scrollView;
// 当结束拖拽时触发 ( 手指将要离开屏幕 )
- (void)scrollViewWillEndDragging:(UIScrollView *)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint *)targetContentOffset NS_AVAILABLE_IOS(5_0);

// 当结束拖拽时触发 ( 手指已经离开屏幕 )
- (void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate;

//当 scrollView 滑动将要减速时触发 ( 将要停止 )
- (void)scrollViewWillBeginDecelerating:(UIScrollView *)scrollView;   
//当 scrollView 结束减速时触发 ( 停止滑动 )
- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView;    
//当设置 scrollView的setContentOffset, 有一个动画效果时触发
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView *)scrollView; 
//设置要缩放的 scrollView 上面的哪一个子视图 , 只能是子视图 , 不能是 scrollView 本身
- (nullable UIView *)viewForZoomingInScrollView:(UIScrollView *)scrollView;     
//当将要开始缩放时触发
- (void)scrollViewWillBeginZooming:(UIScrollView *)scrollView withView:(nullable UIView *)view NS_AVAILABLE_IOS(3_2); 
//当结束缩放时触发
- (void)scrollViewDidEndZooming:(UIScrollView *)scrollView withView:(nullable UIView *)view atScale:(CGFloat)scale; 
//只有当 scrollsToTop 属性设置为 YES 时 , 该方法才会触发 , 进一步询问点击状态条是否有效
- (BOOL)scrollViewShouldScrollToTop:(UIScrollView *)scrollView;  
//当点击状态条并且 scrollView 滑动到顶端时触发
- (void)scrollViewDidScrollToTop:(UIScrollView *)scrollView;      

</code></pre>

<h2 id="toc_5">ScrollView缩放</h2>

<p>除了要指定那个View具有缩放的效果，还需要指定两个属性，<code>scrollView.minimumZoomScale</code>、<code>scrollView.maximumZoomScale</code>。直接Zoom是位图缩放而非重绘</p>

<h2 id="toc_6">ScrollView分页滚动</h2>

<p>通过设置.pageEnable属性可以控制是否开启分页滚动，当开启后，scrollView不再显示滚动条，并整页切换显示内容。<br/>
页面来源：</p>

<ul>
<li>一个巨大的View，简单但是浪费资源</li>
<li>每页一个View，通过Delegate实现View的复用</li>
</ul>

<h3 id="toc_7">ScrollView和PageControl结合</h3>

<p>这两个View结合起来可以实现图片轮播的效果，通过实现PageControl的delegate可以控制currentPage属性进行显示</p>

<h4 id="toc_8">无限轮播</h4>

<p>为了保证轮播图像首尾相接，无限循环，有两个思路：<br/>
1. 在第一张图片前加最后一张图片，在最后一张图片后加第一张图片，在delegate中判断，如果到达这两个特殊位置，在程序中进行跳转。举例：<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-12-14604754924143.jpg" alt=""/><br/>
如果到达位置0，就跳到位置3。如果到达位置4，就跳到位置1。这样就实现了无限轮播。<br/>
2. 设置三个View，左中右。当滑动结束后，用目标位置的View替换中部的View，然后再跳回中部，更新左右两个View，缺点实现复杂，优点消耗资源少。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeekBand.iOS-触摸手势]]></title>
    <link href="http://swuzjb.github.io/14603833170565.html"/>
    <updated>2016-04-11T22:01:57+08:00</updated>
    <id>http://swuzjb.github.io/14603833170565.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">什么是手势</h2>

<p>手势是按照特定规律出现的一些列触摸事件，常见手势有以下几种：</p>

<ul>
<li>Tap 轻拍</li>
<li>Swipe  单轴滑动</li>
<li>Double tap  连续两次轻拍</li>
<li>Long press  长按</li>
<li>Pinch   捏合手指</li>
<li>Two finger tap 双指轻拍 </li>
<li>Rotate 旋转</li>
</ul>

<h2 id="toc_1">实现的原理</h2>

<ol>
<li>收集一些列的UITouch</li>
<li>分析是否符合所需要的规律

<ul>
<li>符合：触发手势响应</li>
<li>否则：转为普通触摸事件响应</li>
</ul></li>
</ol>

<p>Some Example</p>

<pre><code>//Double Tap
-(void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event{
    for(UITouch *aTouch in touches){
        if(aTouch.tapCount &gt;= 2){
            [self respondToDoubleTapFesture:aTouch];
        }
    }
}

//Drag
-(void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event{
    UITouch *aTouch = [touches anyObject];
    CGPoint loc = [aTouch locationInView:self];
    CGPpoint preloc= [aTouch previouslocationInView:self];
    
    CGRect myFrame = self.frame;
    float deltaX = loc.x - preloc.x;
    float deltaY = loc.y - preloc.y;
    myFrame.orgin.x += deltaX;
    myFrame.orgin.Y += deltaY;
    [self setFrame:myFrame];
    
}
</code></pre>

<h2 id="toc_2">UIControl</h2>

<p>如果所有的手势都需要我们自己来实现，自然的第一加大了开发的任务量，第二其实没有那个必要，毕竟复用率极高。于是，苹果为我们封装了好啦！！</p>

<ul>
<li>UIControl：UIView：UIResponder</li>
<li>Traget-Action</li>
<li>UIControlEvents

<ul>
<li>TouchDown</li>
<li>TouchDownRepeat</li>
<li>TouchDragInside</li>
<li>TouchDragOutside</li>
<li>TouchDragEnter</li>
<li>TouchUpInside</li>
<li>TouchUpOutside</li>
<li>TouchCancel</li>
<li>ValueChanged</li>
<li>PrimaryActionTriggered</li>
<li>EditingDidBegin</li>
<li>EditingChanged</li>
<li>EditingDidEnd</li>
<li>EditingDidEndOnExit</li>
<li>AllTouchEvents</li>
<li>AllEditingEvents</li>
</ul></li>
</ul>

<h2 id="toc_3">UIGestureRecongnizer</h2>

<p>苹果在ios3.2以后提供的专门处理手势操作的封装。<br/>
<code>-initWithTraget:(UIView *)action:(SEL)handleGesture</code><br/>
<code>-[UIView addGestureRecognizer:]</code><br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-11-14603848035859.jpg" alt=""/></p>

<h3 id="toc_4">离散手势与连续手势</h3>

<p>触控动作同时分为连续动作(continuous)和不连续动作(discrete)，连续动作例如滑动和拖拽，它会持续一小段时间，而不连续动作例如单击，它瞬间就会完成，在这两类事件的处理上又稍有不同。对于不连续动作，Gesture Recognizer只会给ViewContoller发送一个单一的动作消息(action message),而对于连续动作，Gesture Recognizer会发送多条动作消息给ViewController，直到所有的事件都结束。<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-11-14603850426400.jpg" alt=""/></p>

<h3 id="toc_5">手势识别状态</h3>

<p>在事件处理过程中，这两种方式所处的状态又各有不同，首先，所有的触控事件最开始都是处于可用状态(Possible)，对应UIKit里面的UIGestureRecognizerStatePossible类，如果是不连续动作事件，则状态只会从Possible转变为已识别状态(Recognized,UIGestureRecognizerStateRecognized)或者是失败状态(Failed,UIGestureRecognizerStateFailed)。例如一次成功的单击动作，就对应了Possible-Recognized这个过程。<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-11-5.png" alt=""/><br/>
如果是连续动作事件，如果事件没有失败并且连续动作的第一个动作被成功识别(Recognized)，则从Possible状态转移到Began(UIGestureRecognizerStateBegan)状态，这里表示连续动作的开始，接着会转变为Changed(UIGestureRecognizerStateChanged)状态，在这个状态下会不断循环的处理连续动作，直到动作执行完成变转变为Recognized已识别状态，最终该动作会处于完成状态(UIGestureRecognizerStateEnded)，另外，连续动作事件的处理状态会从Changed状态转变为Canceled(UIGestureRecognizerStateCancelled)状态，原因是识别器认为当前的动作已经不匹配当初对事件的设定了。每个动作状态的变化，Gesture Recognizer都会发送消息(action message)给Target，也就是ViewController，它可以根据这些动作消息进行相应的处理。例如一次成功的滑动手势动作就包括按下、移动、抬起的过程，分别对应了Possible-Began-Changed-Recognized这个过程。</p>

<h3 id="toc_6">同时支持多种手势</h3>

<ul>
<li><p>用依赖关系改变触发顺序</p>

<p><code>-[a requireGestureRecognizerToFail:b];</code><br/>
b失败之前,a先等待</p></li>
<li><p>使用UIGestureRecognizerDelegate控制</p>

<ul>
<li>-gestureRecognizer:shouldReceiveTouch: 这个Touch要不要处理</li>
<li>-gestureRecognizerShouldBegin:是否可以响应</li>
<li>-gestureRecognizer:ShouldRecognizeSimltaneouslyWithGestureRecognizer: 可以一起触发么？</li>
</ul></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeekBand.iOS-事件处理]]></title>
    <link href="http://swuzjb.github.io/14603791205821.html"/>
    <updated>2016-04-11T20:52:00+08:00</updated>
    <id>http://swuzjb.github.io/14603791205821.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>暂时无感，先做归纳</p>
</blockquote>

<h2 id="toc_0">什么是事件</h2>

<p>Events:objects sent to an app informing user action<br/>
在iOS中，事件分为三类：</p>

<ul>
<li>触控事件（单点、多点触控以及各种手势操作）</li>
<li>传感器事件（重力、加速度传感器等）</li>
<li>远程控制事件（远程遥控iOS设备多媒体播放等）</li>
</ul>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-11-14603801710492.jpg" alt=""/></p>

<h2 id="toc_1">事件的分发</h2>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-11-14603809132422.jpg" alt=""/></p>

<h3 id="toc_2">NSRunLoop</h3>

<p>线程附属对象，监听一组事件源<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-11-14603810622282.jpg" alt=""/></p>

<h2 id="toc_3">事件响应</h2>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-11-06022409-75bfb59830bb45c3899de47f77721214.png" alt=""/></p>

<p>处理原理如下：</p>

<ul>
<li>当用户点击屏幕时，会产生一个触摸事件，系统会将该事件加入到一个由UIApplication管理的事件队列中</li>
<li>UIApplication会从事件队列中取出最前面的事件进行分发以便处理，通常，先发送事件给应用程序的主窗口(UIWindow)</li>
<li>主窗口会调用hitTest:withEvent:方法在视图(UIView)层次结构中找到一个最合适的UIView来处理触摸事件</li>
</ul>

<p>(hitTest:withEvent:其实是UIView的一个方法，UIWindow继承自UIView，因此主窗口UIWindow也是属于视图的一种)</p>

<ul>
<li>hitTest:withEvent:方法大致处理流程是这样的：

<ul>
<li>首先调用当前视图的pointInside:withEvent:方法判断触摸点是否在当前视图内：

<ul>
<li>若pointInside:withEvent:方法返回NO，说明触摸点不在当前视图内，则当前视图的hitTest:withEvent:返回nil</li>
<li>若pointInside:withEvent:方法返回YES，说明触摸点在当前视图内，则遍历当前视图的所有子视图(subviews)，调用子视图的hitTest:withEvent:方法重复前面的步骤，子视图的遍历顺序是从top到bottom，即从subviews数组的末尾向前遍历，直到有子视图的hitTest:withEvent:方法返回非空对象或者全部子视图遍历完毕：</li>
</ul></li>
<li>若第一次有子视图的hitTest:withEvent:方法返回非空对象,则当前视图的hitTest:withEvent:方法就返回此对象，处理结束</li>
<li>若所有子视图的hitTest:withEvent:方法都返回nil，则当前视图的hitTest:withEvent:方法返回当前视图自身(self)</li>
<li>最终，这个触摸事件交给主窗口的hitTest:withEvent:方法返回的视图对象去处理。</li>
</ul></li>
</ul>

<p>拿到这个UIView后，就调用该UIView的touches系列方法。<br/>
消息处理过程，在找到的那个视图里处理，处理完后根据需要，利用响应链nextResponder可将消息往下一个响应者传递。<br/>
UIAppliactionDelegate &lt;- UIWindow &lt;- UIViewController &lt;- UIView &lt;- UIView</p>

<p>【关键】：1、iOS判断哪个界面能接受消息是从View层级结构的父View向子View传递，即树状结构的根节点向叶子节点递归传递。2、hitTest和pointInside成对，且hitTest会调用pointInside。3、iOS的消息处理是，当消息被人处理后默认不再向父层传递</p>

<h3 id="toc_4">事件沿Responder Chain传递</h3>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-11-14603818809422.jpg" alt="事件沿Responder Chain传递"/></p>

<h2 id="toc_5">在自定义类里响应触摸事件</h2>

<pre><code>-(void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event;
-(void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event;
-(void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event;
-(void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event;
</code></pre>

<p>UITouch:</p>

<ul>
<li>previousLocationInView 前一次的点击坐标</li>
<li>locationInView 点击的坐标</li>
<li>timestamp 时间戳</li>
<li>type(iOS9+) 防误触，可以判断触摸的是手还是笔</li>
<li>force(iOS9+) 压力信息</li>
</ul>

<p>UIEvent:</p>

<ul>
<li>type:UIEventTypeTouches(Motion/RemoteControl/Press)</li>
<li>timestamp 时间戳</li>
</ul>

<h3 id="toc_6">多点触摸</h3>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-11-14603826494899.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeekBand.iOS-View的层次结构与属性]]></title>
    <link href="http://swuzjb.github.io/14603730042058.html"/>
    <updated>2016-04-11T19:10:04+08:00</updated>
    <id>http://swuzjb.github.io/14603730042058.html</id>
    <content type="html"><![CDATA[
<p>UIView是UIkit中非常重要的一个基本类型，几乎所有的View都是继承于UIView的今天我们对UIView相关知识进行简单地汇总。</p>

<h2 id="toc_0">什么是UIView</h2>

<p>UIView表示屏幕上一块矩形区域：负责提供相应区域的显示内容，也处理相应区域的事件相应。</p>

<h2 id="toc_1">屏幕对象UIScreen</h2>

<p>UIScreen类代表了屏幕,根据个人理解，UIScreen一般也只是用来获取屏幕大小。如下例所示:</p>

<pre><code>CGrect screenBounds = [[UIScreen mainScreen] bounds];//返回的是带有状态栏的Rect (0.0,0.0,320.0,480.0)
</code></pre>

<h3 id="toc_2">iOS8+</h3>

<pre><code>//可变坐标系
.coordinateSpace
//固定坐标系
.fixedCoordinateSpace
</code></pre>

<h3 id="toc_3">截图</h3>

<p><code>-(UIView *)snapshotViewAfterScreenUpdates:(BOOL)afterUpdates</code></p>

<h2 id="toc_4">UIWindow</h2>

<p>UIWindow代表当前应用可用的屏幕区域,由UIApplication或appDelegate创建，保存到appdelegate.window里。使用<code>-makeVisibleAndKey</code>显示。</p>

<h2 id="toc_5">UIView</h2>

<h3 id="toc_6">UIView的树状层次</h3>

<p>前面的文章已经描述过了。<a href="http://zhanjingbo.site/14595674718251.html">View的定位</a></p>

<h3 id="toc_7">UIView的层次管理方法 Create Read Update Delete</h3>

<ul>
<li><p>增加(Create)</p>

<pre><code>-(void)addSubView:(UIView *)view
-(void)insertSubView:(UIView *)view atIndex:(NSInteger) index
-(void)insertSubView:(UIView *)view belowSubView:(UIView *)siblingSubview
-(void)insertSubView:(UIView *)view aboveSubView:(UIView *)siblingSubview
</code></pre></li>
<li><p>删除(delete)</p>

<pre><code>//子View调用
-(void)removeFromSuperview
</code></pre></li>
<li><p>修改(update)</p>

<pre><code>-(void)bringSubViewToFront:(UIView *)view
-(void)sendSubviewToBack:(UIView *)view
-(void)exchangeSubviewAtIndex:(NSInteger)index1 withSubviewAtIndex:(NSInteger)index2
</code></pre></li>
<li><p>查找(Read)</p>

<pre><code>view.window;
view.superview;
view.subviews;

-(BOOL)isDescendantOfView:(UIView *)view
</code></pre></li>
</ul>

<h3 id="toc_8">UIView的重要属性</h3>

<ul>
<li>定位

<ul>
<li>frame/bounds/center/transform</li>
<li>resizeToFit</li>
</ul></li>
<li>视觉

<ul>
<li>backgroundColor</li>
<li>alpha vs. opaque</li>
<li>maskView(iOS8+)</li>
</ul></li>
<li>访问
.tag =&gt; -viewWithTag</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeekBand.iOS-xcode的工程管理]]></title>
    <link href="http://swuzjb.github.io/14603532939876.html"/>
    <updated>2016-04-11T13:41:33+08:00</updated>
    <id>http://swuzjb.github.io/14603532939876.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>从本周开始，课程进入到高级iOS开发，听了一周课，虽然对理论知识有一定的补充，但是仅仅存在于理论层面，可能由于接触代码量太小，也由于自己写的不多，所以对很多问题没有宏观的认识。所以先把知识进行归纳，具体的应用，先挖个坑！！！！（我会回来补的！！！）。</p>
</blockquote>

<p>注：本文的工程管理指的是Xcode对自身的project的相关操作与架构，与公司中的多人协作等工程管理概念无关，请读者知悉。</p>

<h2 id="toc_0">Xcode的工程结构</h2>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-11-14603539333206.jpg" alt=""/></p>

<h2 id="toc_1">Workspace</h2>

<p>workspace（工作空间）从学习java转过来的同学一定不陌生。在Xcode中关于workSpace的理解也差不多，就是一个可以存放多个project的空间合集。<br/>
其作用是管理一组project，在同一个workspace中的project会有以下联系：</p>

<ul>
<li>这些项目将使用同一个位置

<ul>
<li>保存项目状态</li>
<li>保存构造出来的产品</li>
<li>自动可以相互引用</li>
</ul></li>
<li>Xcode自动为独立的项目提供Workspace</li>
<li>Workspace中的Project仍然可以独立打开</li>
</ul>

<p>如果开发人数很多,且负责不同的部分和组件的话,可以用子Project的方式或者Workspace+多个Project的方式来分割功能和组件。由于project.pbxproj这个文件很容易发生冲突(比如新增文件,删除文件,改变Build Setting等都会改变这个文件),且很难合并冲突,那么采用多Project的方式可以降低project.pbxproj冲突的机会,而一些公用的代码或组件也可以放在一个Project中,然后其他Project来依赖这个公用的Project就可以搞定了。</p>

<h2 id="toc_2">Project</h2>

<p>我们接触到的最多的就是Project，再次根据老师的建议，将其翻译为工程。其作用主要为：</p>

<ul>
<li>组织工程用到的文件</li>
<li>管理构建目标Traget</li>
<li>告诉Xcode当前构建和执行目标

<ul>
<li>通过Scheme选择</li>
</ul></li>
</ul>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-11-14603545785312.jpg" alt=""/></p>

<h3 id="toc_3">Group vs. Floder Reference</h3>

<p>Group是对Project中的文件进行分组，为了便于查找和管理<br/>
Floder Reference是对外部文件的一个引用，可以将其关联进入工程，但是文件本身不在工程中，需要额外添加入工程</p>

<h2 id="toc_4">Traget</h2>

<p>Traget（目标），他主要是对Project最后生成的结果进行规划的一个概念，主要作用为：<br/>
- 定义如何构造一个产品（product）<br/>
    - 指定用到的文件子集<br/>
    - 定义依赖关系<br/>
    - 提供构建过程的规则与参数<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-11-14603551277115.jpg" alt=""/><br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-11-14603553121286.jpg" alt=""/></p>

<h3 id="toc_5">Traget与Project区别</h3>

<p>project就是一个工程，一个project可以对应多个target，比如一个xxx游戏的project，有free版的target，收费版的，或者还有什么节日版，product就是target build出来的一个app。<br/>
建议参考：<a href="http://www.cnblogs.com/sevenyuan/p/4272561.html">XCode工程中 Project 和 Targets区别</a></p>

<h2 id="toc_6">Scheme和Destination</h2>

<ul>
<li>Scheme 一组指令在指定Traget上完成特定的任务</li>
<li>Destination 告诉Xcode使用哪个设备或模拟器</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeekBand.iOS-AutoLayout]]></title>
    <link href="http://swuzjb.github.io/14596904523529.html"/>
    <updated>2016-04-03T21:34:12+08:00</updated>
    <id>http://swuzjb.github.io/14596904523529.html</id>
    <content type="html"><![CDATA[
<p>为了让iOS程序猿更简单更好地让自己的程序适应不同的屏幕分辨率，苹果推出了AutoLayout布局的方式。<br/>
在本文中引用了<a href="http://www.cocoachina.com/ios/20151021/13825.html">寒哥细谈之AutoLayout全解</a>的一部分内容，希望可以对学习AutoLayout的同学们有所帮助。</p>

<h2 id="toc_0">什么是AutoLayout</h2>

<ul>
<li>AutoLayout是一种布局技术，专门用于布局UI界面。用来取代Frame布局无法适应屏幕分辨率多重多样的不足。</li>
<li>AutoLayout自iOS6开始引入，由于Xcode4的不给力，当时并没有获得大的推广</li>
<li>在iOS7（Xcode5）开始，Autolayout的开发效率得到很大的提升</li>
</ul>

<p>ps.苹果官方也推荐开发者尽量使用Autolayout来布局UI界面<br/>
Autolayout能轻松的解决屏幕适配的问题</p>

<h2 id="toc_1">开始使用AutoLayout</h2>

<p>自从Xcode6之后，你会看到我们新建一个Single Application，会发现一个ViewController的View非常大，跟任何一个iPhone/iPad的尺寸都不一样，这些都是假象、假象、假象。Apple 把尺寸抽象为了一个正方形，到真正的设备上才是真正的布局。</p>

<h3 id="toc_2">AutoLayout概念</h3>

<ul>
<li>Pin(相对处理)
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-03-1445325788323184.png" alt="Pin"/>

<ol>
<li>边缘距离。最上面的四个虚线表示某个View的距离上、下、左、右多少像素。参考位置一般为对应方向离得最近的View。</li>
<li>限制View的宽高属性值，或者在宽高中加入一次计算关系。</li>
<li>那个蓝色的Constrain To Margin 是iPhone6出现之后新增的。Apple 觉得更大的分辨率有点间距好看，默认为8，如果这个勾上了，这个View距离四周的值就变成了你输入的值+8。可以根据实际需求确定是否勾选。</li>
</ol></li>
<li>Align(对齐处理)
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-03-1445325765517581.png" alt="Align"/>

<ol>
<li>Leading Edges：左对齐</li>
<li>Trailing Edges：右对齐</li>
<li>Top Edges：上对齐</li>
<li>Bottom Edges：下对齐</li>
<li>Horizontal Centers：水平中心对齐</li>
<li>Vertical Centers：竖向中心对齐</li>
<li>Baselines：基线对齐</li>
<li>Horizontal Center in Container：对齐容器中的水平中心</li>
<li>Vertical Center in Container：对齐容器中的竖向中心</li>
</ol></li>
</ul>

<h3 id="toc_3">Autolayout使用</h3>

<p>本单元中使用Demo对AutoLayout的各种约束进行讲解，讲解Demo主要来自文章开头提到的来源。AutoLayout的核心是参照，也就是基本上任何一个View都可以参照另一个View。</p>

<h4 id="toc_4">Demo0-准备</h4>

<p>我们开始Demo前先想想我们在Frame时代，布局需要什么：</p>

<pre><code>{
    original：{x,y}
    size:{width,height}
}
</code></pre>

<p>在iOS中布局是绝对定位的（大致这么理解吧）。所以我们需要某个View的X，Y，W，H。我们从基本的入门 ，我们无论添加多少约束，都是需要定位好某个View的X，Y，W，H。少了不行，多了更不行。</p>

<h4 id="toc_5">Demo1-某个View距离父View上下左右间距全部为20。</h4>

<p>对该View添加如下约束：<br/>
    <img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-03-1445324481117197.png" alt=""/><br/>
这里有几条注意事项：<br/>
    1.请注意我这里把距离下面的，也就是BottomLayoutGuide的约束改成了距离控制器的View，为什么？因为BottomLayoutGuide是晚于View加载的，如果参考这个，会造成进入页面会卡一下。尽量不要直接参考下面 TopLayoutGuide 则没事。<br/>
    2.加完约束你会发现貌似并没有什么效果？不是的，屏幕中出现的黄色的线条 ，这是IB在提升我们你所添加的约束 。和真实的尺寸不一样，怎么修改？在Resolve Auto Layout Issue中选择Update Frame。参考动图。<br/>
动图：<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-03-1445324514982324.gif" alt="demo1"/></p>

<h4 id="toc_6">Demo2-某个View距离在父View的左侧20，白色View，上20，宽高为100。</h4>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-03-1445324604147373.gif" alt="Demo2"/></p>

<h4 id="toc_7">Demo3-添加一个白色View，距上20，左20，宽高和demo2中的一致</h4>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-03-1445324655544093.gif" alt="demo3"/></p>

<h4 id="toc_8">Demo4-AspectRatio比例。假设某个假设某个View距离父View右上角20,20 宽高比2:1宽100。</h4>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-03-1445324655544093.gif" alt="demo4"/><br/>
AutoLayout的公式：<code>第一个Item的属性= (= )第二个Item的属性*Multiplier+Constant</code>,注意比例是支持表达式的如2:3、relation是支持great than,less than.具体的值由系统自动计算。</p>

<h4 id="toc_9">Demo5-某个View距离在父View的右侧20，demo4中白色View上20，宽高和Demo4中的宽高一样，并且有对齐。</h4>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-03-1445324807851881.gif" alt="Demo5"/></p>

<h2 id="toc_10">参考资料</h2>

<blockquote>
<ol>
<li><a href="http://www.cocoachina.com/ios/20151021/13825.html">寒哥细谈之AutoLayout全解</a></li>
<li><a href="http://www.jianshu.com/p/66e0b808d833">相关资料</a></li>
</ol>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeekBand.iOS-Autoresizing]]></title>
    <link href="http://swuzjb.github.io/14595830611425.html"/>
    <updated>2016-04-02T15:44:21+08:00</updated>
    <id>http://swuzjb.github.io/14595830611425.html</id>
    <content type="html"><![CDATA[
<p>在了解了UIView的定位相关知识以后，我们就可以进一步讨论UIView的布局方式了。就现有的方式知识来时，我们直接使用SB创建界面的时候所有View的大小和位置都是定死的，可是我们所使用的iOS设备的屏幕分辨率却有很大的差别。<br/>
为了可以更简单的使View自动的适应不同大小的屏幕，苹果在iOS2.0中提出了Autoresizing功能。</p>

<h2 id="toc_0">界面布局过程</h2>

<ul>
<li>super view

<ul>
<li>layoutSubviews

<ul>
<li>iOS5.1- 实现是空的</li>
<li>后续的版本实现了autoLayout的支持</li>
</ul></li>
<li>setNeedsLayout

<ul>
<li>下次绘制之前需要重新推算布局</li>
</ul></li>
<li>layoutIfNeeded

<ul>
<li>立即重新推算布局
##对布局的需求的分析
实现布局主要是计算界面元素之间的间距</li>
</ul></li>
<li>固定间距
用struts（柱子）表示</li>
<li>弹性间距
根据界面尺寸比例调整的间距，用springs（弹簧）表示
##UIView的AutoresizingMask</li>
</ul></li>
<li>Fixed vs Flexible

<ul>
<li>未指定flexible 就是 fixed</li>
<li>UIViewAutoResizing

<ul>
<li>None</li>
<li>FlexibleLeftMargin</li>
<li>FlexibleWidth</li>
<li>FlexibleRightMargin</li>
<li>FlexibleTopMargin</li>
<li>FlexibleHeight</li>
<li>FlexibleBottomMargin</li>
</ul></li>
<li>Size

<ul>
<li>width</li>
<li>height</li>
</ul></li>
<li>Margin

<ul>
<li>left</li>
<li>right</li>
<li>Top</li>
<li>bottom</li>
</ul></li>
</ul></li>
</ul>

<h2 id="toc_1">在Xcode中设置autoresizing</h2>

<ol>
<li>将View的autoLayout关闭掉
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-02-14595904919420.jpg" alt=""/></li>
<li>在Xcode中设置autoresizing
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-02-14595905330279.jpg" alt=""/></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeekBand.iOS-View的定位]]></title>
    <link href="http://swuzjb.github.io/14595674718251.html"/>
    <updated>2016-04-02T11:24:31+08:00</updated>
    <id>http://swuzjb.github.io/14595674718251.html</id>
    <content type="html"><![CDATA[
<p>在学习View的autoLayout之前，必须先搞清楚一些基本的概念，那就是在iOS中View的位置是如何被系统确定的。<br/>
UIView表示屏幕上的一块矩形区域：负责提供相应区域的事件响应。</p>

<h2 id="toc_0">View的层次</h2>

<p>View的层次结构是一个树状结构：<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-02-14595798678915.jpg" alt="View的层次结构"/><br/>
上级View可以对子View进行裁剪，通过UIView.clipsToBounds来控制，默认不裁剪，示意图如下：<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-11-14603743369820.jpg" alt=""/></p>

<h2 id="toc_1">UIKit坐标系</h2>

<p>-CGPoint{x,y}用于描述坐标<br/>
-CGSize{width,height}用于描述宽和高<br/>
-CGRect{origin,size}描述一个矩形区域<br/>
坐标系如图：<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-02-14595803487624.jpg" alt="UIKit坐标系"/></p>

<h2 id="toc_2">View的定位-Frame</h2>

<p>view的frame属性用于描述View的矩形位置信息。其是一个CGRect结构体。用于描述该View在其SuperView的坐标系内描述其所占区域。</p>

<pre><code>-(CGRect)frame{
    return CGRectMake(self.frame.origin.x,self.frame.origin.y,self.frame.size.width,self.frame.size.height);
}
</code></pre>

<h2 id="toc_3">View的定位-Bounds</h2>

<p>该view在本地坐标系统中的位置和大小。（参照点是，本地坐标系统，就相当于ViewB自己的坐标系统，以0,0点为起点）</p>

<pre><code>-(CGRect)bounds{
    return CGRectMake(0,0,self.frame.size.width,self.frame.size.height);
}
</code></pre>

<p><img src="http://img.my.csdn.net/uploads/201303/24/1364058232_8785.jpg" alt=""/></p>

<h2 id="toc_4">View的定位-Center</h2>

<p>center：该view的中心点在父view坐标系统中的位置和大小。（参照点是，父亲的坐标系统）</p>

<h2 id="toc_5">Demo展示</h2>

<pre><code>UIView *view1 = [[UIView alloc] initWithFrame:CGRectMake(20, 20, 280, 250)];  
[view1 setBounds:CGRectMake(-20, -20, 280, 250)];  
view1.backgroundColor = [UIColor redColor];  
[self.view addSubview:view1];//添加到self.view  
NSLog(@&quot;view1 frame:%@========view1 bounds:%@&quot;,NSStringFromCGRect(view1.frame),NSStringFromCGRect(view1.bounds));  
  
UIView *view2 = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 100, 100)];  
view2.backgroundColor = [UIColor yellowColor];  
[view1 addSubview:view2];//添加到view1上,[此时view1坐标系左上角起点为(-20,-20)]  
NSLog(@&quot;view2 frame:%@========view2 bounds:%@&quot;,NSStringFromCGRect(view2.frame),NSStringFromCGRect(view2.bounds));  
</code></pre>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-04-02-14595828809322.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeekBand.iOS-UICollectionView]]></title>
    <link href="http://swuzjb.github.io/14592472421509.html"/>
    <updated>2016-03-29T18:27:22+08:00</updated>
    <id>http://swuzjb.github.io/14592472421509.html</id>
    <content type="html"><![CDATA[
<pre><code>虽然tableView可以提供很强大的数据展示功能。但是它还是有一定的局限性的，那就是在一些媒体展示时不够灵活，一行只能展示一个item。
为了克服这样的情况，最初的大神们都是使用自定义table。但是从iOS6开始，苹果为我们提供了一个新的View组件，CollectionView。
它对TableView的优化：
- 对表格的自然扩展：网格式界面
- 对表格内部职责进一步细分：分离Layout
</code></pre>

<h2 id="toc_0">CollectionView实例</h2>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-29-14592479241360.jpg" alt="CollectionView"/></p>

<h2 id="toc_1">CollectionView界面构成</h2>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-29-14592479722467.jpg" alt="CollectionView"/></p>

<p>ps.CollectionView可以通过自定义Layout子类实现cells位置自定义。</p>

<h2 id="toc_2">说明</h2>

<p>Collection的总体结构与Table相似，但是需要注意以下几点：<br/>
- cell在collection中被称为item<br/>
- header/footer被称为supplementary view<br/>
- item view必须register<br/>
- 布局要交给独立的Layout子类，edit方法不再指定动画类型</p>

<h2 id="toc_3">Cell（Item）供应</h2>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-29-14592483311021.jpg" alt=""/></p>

<h2 id="toc_4">基本使用</h2>

<ol>
<li>创建CollectionView对象</li>
<li><p>提供DataSource(实现UICollectionViewDataSource协议)</p>

<pre><code>//返回item的数量
- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section;

//返回item实例
- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath;
</code></pre></li>
</ol>

<h2 id="toc_5">交互</h2>

<p>UICollectionView的交互能力强大，除了索引，tableView有的都有。实现UICollectionViewDelegate协议</p>

<ul>
<li>点选</li>
<li><p>编辑格子</p>

<ul>
<li>插入、删除</li>
<li>移动格子的位置</li>
</ul></li>
<li><p>刷新数据</p></li>
<li><p>将一组编辑或刷新动作合并到一个动画过程里</p></li>
<li><p>滚动到某个格子</p></li>
<li><p>动态更换布局</p></li>
</ul>

<h3 id="toc_6">交互响应机会</h3>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-29-14592502377483.jpg" alt=""/></p>

<h3 id="toc_7">刷新CollectionView</h3>

<ul>
<li>reloadData  全部刷新</li>
<li>reloadSection  刷新某个section</li>
<li>reloadItemsAtIndexPaths 刷新某个cell</li>
</ul>

<h3 id="toc_8">手工移动格子</h3>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-29-14592504685410.jpg" alt=""/></p>

<h2 id="toc_9">参考资料</h2>

<p><a href="https://developer.apple.com/videos/play/wwdc2012-205/">wwdc2012-205</a><br/>
<a href="https://developer.apple.com/videos/play/wwdc2012-219/">wwdc2012-219</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeekBand.iOS-UILocalized​Indexed​Collation]]></title>
    <link href="http://swuzjb.github.io/14591709450392.html"/>
    <updated>2016-03-28T21:15:45+08:00</updated>
    <id>http://swuzjb.github.io/14591709450392.html</id>
    <content type="html"><![CDATA[
<p>tableView中区域索引标题（section index titles）。它们是在列表右边纵向排列的字母，你可以在电话本联系人界面和音乐曲库界面中看到它们。<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-28-14591711593577.jpg" alt="Section Index Titles Example"/><br/>
当用户在那个列表里向下移动手指时，列表会在对应的区域间跳动。这会使得冗长的列表视图变得超级好用。<br/>
可以通过实现下列 UITableViewDataSource 中的方法来显示区域索引标题：</p>

<pre><code>//返回一个区域索引标题的数组，用于在列表右边显示，例如字母序列 A...Z 和 #。区域索引标题很短，通常不能多于两个 Unicode 字符。
-sectionIndexTitlesForTableView:
//返回当用户触摸到某个索引标题时列表应该跳至的区域的索引。 
-tableView:sectionForSectionIndexTitle:atIndex: 
</code></pre>

<p>我们肯定不想自己去生成这个字母列表。对于不同的地区来说，字母的顺序，甚至「字母」，的意义都会大不相同。此时UILocalizedIndexedCollation来拯救我们了。<br/>
UILocalizedIndexedCollation 是一个帮助我们组织列表数据的类，它能够根据地区来生成与之对应区域索引标题。不需要直接创建它的对象，我们可以通过 UILocalizedIndexedCollation +currentCollation 获得一个对应当前地区的单例对象。<br/>
UILocalizedIndexedCollation 的首要任务就是决定对于当前地区区域索引标题应该是什么，我们可以通过 sectionIndexTitles 属性来获得它们。</p>

<p>下表可以帮助你更好的了解不同地区之间区域索引标题的差别。</p>

<table>
<thead>
<tr>
<th>Locale</th>
<th>Section Index Titles</th>
</tr>
</thead>

<tbody>
<tr>
<td>en_US</td>
<td>A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, #</td>
</tr>
<tr>
<td>ja_JP</td>
<td>A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, あ, か, さ, た, な, は, ま, や, ら, わ, #</td>
</tr>
<tr>
<td>sv_SE</td>
<td>A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, Å, Ä, Ö, #</td>
</tr>
<tr>
<td>ko_KO</td>
<td>A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, ㄱ, ㄴ, ㄷ, ㄹ, ㅁ, ㅂ, ㅅ, ㅇ, ㅈ, ㅊ, ㅋ, ㅌ, ㅍ, ㅎ, #</td>
</tr>
<tr>
<td>ar_SA</td>
<td>A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, آ, ب, ت, ث, ج, ح, خ, د, ذ, ر, ز, س, ش, ص, ض, ط, ظ, ع, غ, ف, ق, ك, ل, م, ن, ه, و, ي, #</td>
</tr>
</tbody>
</table>

<p>有了这些区域标题，下一步就是判断每个模型对象分别对应哪个区域了。这可以通过实现 <code>-sectionForObject:collationStringSelector:</code> 做到。这个方法返回 NSInteger 类型的索引，它对应了模型对象的指定方法的返回值。方法名称可以为 localizedName、title 甚至 description 等。</p>

<p>显而易见，列表数据源中会有一个数组，它对应了列表中有多少区域，数组元素表示区域中的每一行。由于整理工作是由 UILocalizedIndexedCollation 来做的，因此理所当然地，也应该由它来为每个区域中的行进行排序。和 -sectionForObject:collationStringSelector: 的实现方式类似，– sortedArrayFromArray:collationStringSelector: 可以为我们基于模型对象的本地化标题来排列模型对象。</p>

<p>最后，数据源应该实现 -tableView:sectionForSectionIndexTitle:atIndex: 方法，这样当我们触摸到区域索引标题时，能够让列表调至对应的区域。UILocalizedIndexedCollation -sectionForSectionIndexTitleAtIndex: 可以轻松帮我们做到。</p>

<p>都说完了，下边是列表数据源的一个常见实现：</p>

<pre><code>//数据预处理
-(NSMutableArray *)getSectionsArray{
    UILocalizedIndexedCollation* collation = [UILocalizedIndexedCollation currentCollation];
    //获得索引数和section标题数
    NSInteger index, sectionTitlesCount = [[collation sectionTitles] count];
    //临时数据，存放section对应的联系人数组数据
    NSMutableArray *newSectionsArray = [[NSMutableArray alloc] initWithCapacity:sectionTitlesCount];
    //设置sections数组初始化：元素包含联系人数据的空数据
    for (index = 0; index &lt; sectionTitlesCount; index++) {
        NSMutableArray *array = [[NSMutableArray alloc] init];
        [newSectionsArray addObject:array];
    }
    for (Linkman *linkman in self.allLinkmen) {
        
        //根据Linkman的name，获得对应的的section number
        NSInteger sectionNumber = [collation sectionForObject:linkman collationStringSelector:@selector(name)];
        //获得section的数组
        NSMutableArray *tempSections = [newSectionsArray objectAtIndex:sectionNumber];
        //添加内容到section中
        [tempSections addObject:linkman];
    }
    return newSectionsArray;
}





//数据容器操作
//返回索引的title值
-(NSArray&lt;NSString *&gt; *)sectionIndexTitlesForTableView:(UITableView *)tableView{
    return [[UILocalizedIndexedCollation currentCollation] sectionIndexTitles];
}
//设置section的header的title值
-(NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section{
    return [UILocalizedIndexedCollation currentCollation].sectionTitles[section];
}
//点击索引的位置移动
-(NSInteger)tableView:(UITableView *)tableView sectionForSectionIndexTitle:(NSString *)title atIndex:(NSInteger)index{
    return [[UILocalizedIndexedCollation currentCollation] sectionForSectionIndexTitleAtIndex:index];
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ViewController生命周期]]></title>
    <link href="http://swuzjb.github.io/14591686020244.html"/>
    <updated>2016-03-28T20:36:42+08:00</updated>
    <id>http://swuzjb.github.io/14591686020244.html</id>
    <content type="html"><![CDATA[
<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-28-1684683-b9c0cd65a8eb07b0.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeekBand.iOS-UITableView]]></title>
    <link href="http://swuzjb.github.io/14590829108890.html"/>
    <updated>2016-03-27T20:48:30+08:00</updated>
    <id>http://swuzjb.github.io/14590829108890.html</id>
    <content type="html"><![CDATA[
<p>第三周的课程终于迎来了大杀器——tableView。table这个view可能是使用面最广泛的一个数据展示方法了吧。本文就简要的介绍一下tableview在iOS开发过程中的使用。</p>

<h2 id="toc_0">建立</h2>

<p>一个tableView要想顺利的现实在iOS的VC当中，必须要实现两个协议，他们分别是：UITableViewDataSource，UITableViewDelegate。<br/>
其中UITableViewDataSource负责Table的数据供应，UITableViewDelegate负责对Table的各种事件进行相应。<br/>
Table主要由两个部分组成section和cell（或者称为row）。<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-28-14591617617364.jpg" alt=""/></p>

<ol>
<li><p>UITableViewDataSource</p>

<pre><code>//在UITableViewDataSource中有两个方法是必须实现的

//返回某个section中的行数，应由数据进行指定
-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section;

//根据indexPath（包括section和row）来返回对应的cell实例
-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath; 

//非必须

//返回表格的section数量，下标从0开始计算，默认为1
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView; 

// cell是否可以进入编辑模式，默认为true
- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath;
//返回section的索引，主要用于通讯录类表格(e.g. &quot;ABCD...Z#&quot;)
- (nullable NSArray&lt;NSString *&gt; *)sectionIndexTitlesForTableView:(UITableView *)tableView ；
//返回对应section的编号
- (NSInteger)tableView:(UITableView *)tableView sectionForSectionIndexTitle:(NSString *)title atIndex:(NSInteger)index;  

// Data manipulation - insert and delete support
// After a row has the minus or plus button invoked (based on the UITableViewCellEditingStyle for the cell), the dataSource must commit the change
// Not called for edit actions using UITableViewRowAction - the action&#39;s handler will be invoked instead
-(void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath;

</code></pre></li>
<li><p>UITableViewDelegate</p>

<pre><code>//在delegate中没有必须实现的方法，但是有几个非常常用的方法
//设置section的header和footer的view
- (nullable UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section;
- (nullable UIView *)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section; 
//点击操作响应方法
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath;
</code></pre>

<p>delegate中对table的各项操作定义了非常详细的操作，在这里仅简要介绍。</p></li>
</ol>

<h2 id="toc_1">Cell定制</h2>

<p>在tableView中，最重要的就是定制cell，用于显示数据。在这里简要的说明几种cell的产生方法。</p>

<ol>
<li><p>使用系统预定义的cell</p>

<pre><code>//先根据Identifier取对象实例,实现复用
UITableViewCell* cell = [tableView dequeueReusableCellWithIdentifier:@&quot;&quot;]; 
//如果为空进行创建
if(cell == nil){
    cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@&quot;Default&quot;];
}

</code></pre>

<p>initWithStyle:UITableViewCellStyle的几种值：</p>

<ol>
<li><p>UITableViewCellStyleDefault<br/>
该格式提供了一个简单的左对齐的文本标签textLabel和一个可选的图像imageView。如果显示图像，那么图像将在最左边。这种格式虽然可以设置detailTextLabel，但是不会显示该标签。</p></li>
<li><p>UITableViewCellStyleSubtitle<br/>
该格式与前一种相比，增加了对detailTextLabel的支持，该标签将会显示在textLabel标签的下面，字体相对较小。</p></li>
<li><p>UITableViewCellStyleValue1<br/>
该格式居左显示textLabel，居右显示detailTextLabel，且字体较小</p></li>
<li><p>UITableViewCellStyleValue2<br/>
该格式居左现实一个小型蓝色主标签textLabel，在其右边显示一个小型黑色副标题详细标签detailTextLabel。该格式不支持图像.<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-28-14591626918504.jpg" alt=""/></p></li>
</ol></li>
<li><p>自定义Cell</p>

<ol>
<li><p>使用StoryBoard绘制<br/>
在SB中使用IB对cell进行绘制，并指定identifier，内部的view指定tag.</p>

<pre><code>UITableViewCell* cell = [tableView dequeueReusableCellWithIdentifier:@&quot;&quot;]; 
UIView* view =(UIView *) [cell viewWithTag:int];
</code></pre></li>
<li><p>xib方式<br/>
创建一个XibCell继承UITableViewCell，并创建xib文件，在xib中对cell进行绘制</p>

<pre><code>//0.覆盖initWithStyle方法,手工加载xib
//1.在VC的viewDidLoad方法中对xib进行注册
//2.使用Identifier创建Cell实例
</code></pre></li>
<li><p>使用UITableViewController设计静态表格<br/>
对类似于系统设置这些界面，使用静态表格直接完成设计</p></li>
</ol></li>
</ol>

<h2 id="toc_2">TableView交互</h2>

<ul>
<li><p>选中<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-28-14591667830172.jpg" alt=""/></p></li>
<li><p>控制表格滚动<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-28-14591668374304.jpg" alt=""/></p></li>
<li><p>刷新table</p>

<pre><code>//重载所有数据
[tableView reloadData];
//刷新行
[tableView reloadRowsAtIndexPaths:withRowAnimation];
//刷新组
[tableView reloadSections:WithAnimation];
//刷新组索引
[tableView reloadSectionIndexTitles];
</code></pre></li>
<li><p>编辑模式<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-28-14591672893977.jpg" alt=""/><br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-28-14591673261962.jpg" alt=""/></p></li>
<li><p>表格与搜索<br/>
搜索并非表格的一部分，但实际使用中经常联系在一起。</p>

<ul>
<li><p>UISearchBar（iOS2+）<br/>
<code>[tableView setTableViewHeaderView:searchBar];</code></p></li>
<li><p>UISearchDisplayController(iOS7)</p></li>
<li><p>UISearchController(iOS8)</p></li>
</ul></li>
<li><p>高亮与菜单<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-28-14591676374088.jpg" alt=""/></p></li>
<li><p>表格索引<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-28-14591676858863.jpg" alt=""/></p></li>
</ul>

<h2 id="toc_3">UITableViewController</h2>

<p>该类主要用于实现静态表格，以及封装了下拉刷新等操作。</p>

<h2 id="toc_4">数据传递</h2>

<p>和其它VC一样使用segue或delegate</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeekBand.iOS-UIKIT继承关系]]></title>
    <link href="http://swuzjb.github.io/14586526599234.html"/>
    <updated>2016-03-22T21:17:39+08:00</updated>
    <id>http://swuzjb.github.io/14586526599234.html</id>
    <content type="html"><![CDATA[
<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-22-uikit_classes.jpg-Watermark.jpeg" alt="UIKIT继承关系"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeekBand.iOS-StoryBoard]]></title>
    <link href="http://swuzjb.github.io/14585764912552.html"/>
    <updated>2016-03-22T00:08:11+08:00</updated>
    <id>http://swuzjb.github.io/14585764912552.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>苹果官方是推荐我们将所有的UI都使用Storyboard去搭建，Storyboard也是一个很成熟的工具了。使用Storyboard去搭建所有界面，我们可以很迅捷地搭建出复杂的界面，也就是说能为我们节省大量的时间。我们还可以很直观地看出各个界面之间的关系，修改起来也很方便。将来如果遇到需要作修改的地方，我们只需要找到相对应的Storyboard就可以了，比起使用代码来绘制界面来说，快捷了不少。</p>
</blockquote>

<p>本文主要介绍segue。</p>

<h2 id="toc_0">使用storyboard进行页面跳转</h2>

<ol>
<li><p>纯storyBoard操作</p>

<p>我们在Storyboard上放置一个按扭，在按扭上方点击并按住“右键”不放，拖动到跳转的下一个界面上。<br/>
<img src="http://images.cnitblog.com/blog/684349/201412/181547007042730.png" alt=""/><br/>
松开右键后，会有一个黑色透明的弹出框，选择跳转的方式:<br/>
<img src="http://images.cnitblog.com/blog/684349/201412/181552304691774.png" alt=""/><br/>
从这里可以看到，界面和界面之间多了一条线连接，如下图：<br/>
<img src="http://images.cnitblog.com/blog/684349/201412/181621394237889.png" alt=""/><br/>
此时我们已经建立一个用于页面跳转的关系，称之为segue<br/>
我们可以在Xcode右边的工具栏看到，我们刚刚的连线操作（现在可以运行项目了）：<br/>
<img src="http://images.cnitblog.com/blog/684349/201412/181603228131602.png" alt=""/></p></li>
<li><p>使用代码调用segue跳转<br/>
需要在Storyboard Segue中的Identifier指定一个标识符。<br/>
使用某个动作跳转：<code>[self performSegueWithIdentifier:@&quot;Identifier&quot; sender:self];</code></p></li>
</ol>

<h2 id="toc_1">使用segue传递数据</h2>

<ol>
<li><p>使用prepareForSegue进行传值</p>

<pre><code>-(void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // segue.identifier：获取连线的ID
    if ([segue.identifier isEqualToString:@&quot;SendValue&quot;]) {
        // segue.destinationViewController：获取连线时所指的界面（VC）
        //方法1：设置属性
        ReceiveViewController *receive = segue.destinationViewController;
        receive.name = @&quot;Garvey&quot;;
        receive.age = 110;
        //2:使用KVC给目标场景传值
        [destinationController setValue:@119 forKey:@number];
     }
}
</code></pre></li>
<li><p>返回上级的某个页面<br/>
使用unwindForSegue进行返回（iOS9+）。<br/>
<code>-(IBAction)unwindForSegue:(UIStoryboardSegue *)unwindSegue towardsViewController:(UIViewController *)subsequentVC{}</code></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeekBand.iOS-UIViewController]]></title>
    <link href="http://swuzjb.github.io/14585643199431.html"/>
    <updated>2016-03-21T20:45:19+08:00</updated>
    <id>http://swuzjb.github.io/14585643199431.html</id>
    <content type="html"><![CDATA[
<p>UIViewController是一个普通的ObjC对象，它的主要功能是管理View、传递数据、响应用户操作、内存管理（状态保持）、适应适配。</p>

<h2 id="toc_0">iOS设计模式</h2>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-21-cocoa_mvc.gif" alt="iOS设计模式"/></p>

<h2 id="toc_1">UIViewController调用顺序</h2>

<p>ViewController生命周期会经历初始化、加载视图、销毁视图、生命结束等过程。</p>

<ol>
<li>init方法
初始化ViewController本身。</li>
<li>loadView方法
当view需要被展示而它却是nil时，viewController会调用该方法，如果代码构建View的话需要重写此方法。</li>
<li>viewDidLoad方法
执行完loadView后继续执行viewDidLoad，loadView时还没有view，而viewDidLoad时view已经创建好了。</li>
<li>viewDidUnload方法
当系统内存吃紧的时候会调用该方法。</li>
<li>dealloc
释放其他资源或内存。</li>
</ol>

<p>View Controller的生命周期如下图所示：<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-21-UIViewController%20Class%20Reference_2x.png" alt="UIViewController生命周期"/></p>

<h2 id="toc_2">rootViewController的过程</h2>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-21-14585714986064.jpg" alt="rootViewController"/></p>

<p>使用代码指定rootViewController</p>

<pre><code>- (void) tryNibName {
  self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];

  UIViewController * rootVC = [[UIViewController alloc] initWithNibName:@&quot;rootVC&quot; bundle:nil];
  self.window.rootViewController = rootVC;

  [self.window makeKeyAndVisible];
}

- (void) tryNibOfUserVCName {
  // xib can be MyViewController or MyView
  self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
  UIViewController * rootVC = [[MyViewController alloc] init];
  self.window.rootViewController = rootVC;

  [self.window makeKeyAndVisible];
}

- (void) tryNibOfVCName {
  // UI prefix in class name means system class, which will bypass xib lookup!
  self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
  UIViewController * rootVC = [[UIViewController alloc] init];
  self.window.rootViewController = rootVC;

  [self.window makeKeyAndVisible];
}

</code></pre>

<h2 id="toc_3">多个ViewController的替换</h2>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-21-14585720269718.jpg" alt=""/></p>

<h2 id="toc_4">ViewController传值</h2>

<ol>
<li>使用属性进行传值</li>
<li>使用delegate进行回调进行传值</li>
<li>使用segue进行传值</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeekBand.iOS—APP生命周期]]></title>
    <link href="http://swuzjb.github.io/14585638251666.html"/>
    <updated>2016-03-21T20:37:05+08:00</updated>
    <id>http://swuzjb.github.io/14585638251666.html</id>
    <content type="html"><![CDATA[
<p>iOS的应用程序的生命周期，还有程序是运行在前台还是后台，应用程序各个状态的变换，这些对于开发者来说都是很重要的。 iOS系统的资源是有限的，应用程序在前台和在后台的状态是不一样的。在后台时，程序会受到系统的很多限制，这样可以提高电池的使用和用户体验。</p>

<h2 id="toc_0">应用程序的状态</h2>

<ol>
<li>Not Running 未运行 程序没有启动</li>
<li>Inactive 未激活 程序在前台运行，不过没有接收到事件。在没有事件处理情况下程序通常停留在这个状态。</li>
<li>Active 激活 程序在前台运行而且接收到了事件。这也是前台的一个正常的模式</li>
<li>Backgroud 后台 程序在后台而且能执行代码，大多数程序进入这个状态后会在在这个状态上停留一会。时间到之后会进入挂起状态(Suspended)。有的程序经过特殊的请求后可以长期处于Backgroud状态</li>
<li><p>Suspended 挂起 程序在后台不能执行代码。系统会自动把程序变成这个状态而且不会发出通知。当挂起时，程序还是停留在内存中的，当系统内存低时，系统就把挂起的程序清除掉，为前台程序提供更多的内存。<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-21-1348823833_6296.png" alt="应用程序的状态转换"/><br/>
大多数发生状态转换时都会调用delegate对象对应的方法来响应App的状态改变。下面汇总了delegate对象的所有方法，当App状态发生转换时，你可能会使用到它们。</p></li>
</ol>

<ul>
<li>application:willFinishLaunchingWithOptions: - 这个方法是你在启动时的第一次机会来执行代码</li>
<li>application:didFinishLaunchingWithOptions: - 这个方法允许你在显示app给用户之前执行最后的初始化操作</li>
<li>applicationDidBecomeActive: - app已经切换到active状态后需要执行的操作</li>
<li>applicationWillResignActive: - app将要从前台切换到后台时需要执行的操作</li>
<li>applicationDidEnterBackground: - app已经进入后台后需要执行的操作</li>
<li>applicationWillEnterForeground: - app将要从后台切换到前台需要执行的操作，但app还不是active状态</li>
<li><p>applicationWillTerminate: - app将要结束时需要执行的操作<br/>
现在讲下App启动、来回切换App和锁屏时状态的切换和调用对应哪些delegate对象的方法：</p></li>
<li><p>App启动和active/inactive<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-21-5588d15fc4c41.jpg.gif" alt=""/><br/>
如图所示，当App启动时，首先由not running状态切换到inactive状态，此时调用application:didFinishLaunchingWithOptions:方法；然后由inactive状态切换到active状态，此时调用applicationDidBecomeActive:方法。<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-21-5588d56cdc36a.jpg.gif" alt=""/><br/>
当App发生中断时，由active状态切换到inactive状态，此时调用applicationWillResignActive:方法。</p></li>
<li><p>来回切换App<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-21-5588d259ba79b.jpg.gif" alt=""/><br/>
如图所示，当切换到另一个App时，由状态active切换到inactive，此时调用applicationWillResignActive:方法；然后从inactive状态切换到Background状态，此时调用applicationDidEnterBackground:方法。<br/>
而当切换回本来的App时，由Background状态切换到inactive状态，此时调用applicationWillEnterForeground:方法，然后由inactive状态切换到active状态，调用applicationDidBecomeActive:方法。</p></li>
<li><p>锁屏<br/>
当手机锁屏时，由状态active切换到inactive，此时调用applicationWillResignActive:；然后再由inactive状态切换到Background状态，此时调用applicationDidEnterBackground:方法。</p></li>
</ul>

<h2 id="toc_1">Main函数入口</h2>

<p>所有基于OC编写的App的入口都是main函数，但iOS应用程序有点不同。不同就是你不需要为iOS应用程序而自己编写main函数，当你使用Xcode创建工程的时候就已经提供了。除非一些特殊情况，否则你不应该修改Xcode提供的main函数实现。示例代码如下：</p>

<pre><code>#import &lt;UIKit/UIKit.h&gt;  
#import &quot;AppDelegate.h&quot;  
  
int main(int argc, char * argv[]){  
    @autoreleasepool {  
        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));  
    }   
}  
</code></pre>

<p>上面实例代码中有一个很重要的函数UIApplicationMain，它主要是创建App的几个核心对象来处理以下过程：</p>

<ol>
<li>从可用Storyboard文件加载用户界面；</li>
<li>调用AppDelegate自定义代码来做一些初始化设置；</li>
<li>将App放入Main Run Loop环境中来响应和处理与用户交互产生的事件。
##Main Run Loop
一个iOS应用程序的main run loop主要作用是处理所有与用户相关的事件。UIApplication对象在启动时就设置main run loop和使用它来处理事件和更新基于view的界面。正如它的名字显示，main run loop是运行在应用程序的主线程。这样就确保与接收到用户相关的事件被有序地处理。
下图显示main run loop的架构和用户事件最终是怎样被应用程序处理。当用户与设备交互时，系统就会生成与交互关联的事件，然后被应用程序的UIKit通过一个特殊的端口来分发。应用程序把事件放入队列，然后逐个分发到main run loop来执行。UIApplication对象是第一个对象接收到事件，然后决定怎样处理它。一个touch event通常都被分发到main window对象，然后依次分发到发生触碰的view。其他event的接收事件对象路径可能有点不同。
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-21-5588c902a375c.jpg" alt=""/></li>
</ol>

<h2 id="toc_2">程序流程</h2>

<ol>
<li><p>加载程序进入前台<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-21-8370_140710121328_1.png" alt="加载程序进入前台"/></p></li>
<li><p>程序中断<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-21-8370_140710121433_1.png" alt="程序中断"/></p></li>
<li><p>进入后台运行<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-21-8370_140710121400_1.png" alt="后台运行"/></p></li>
</ol>

<h2 id="toc_3">应用程序的终止</h2>

<p>系统常常是为其他app启动时由于内存不足而回收内存最后需要终止应用程序，但有时也会是由于app很长时间才响应而终止。如果app当时运行在后台并且没有暂停，系统会在应用程序终止之前调用applicationWillTerminate:来保存用户的一些重要数据以便下次启动时恢复到app原来的状态。</p>

<h2 id="toc_4">参考</h2>

<ol>
<li><a href="http://www.cocoachina.com/industry/20140710/9089.html">iOS应用程序的生命周期</a></li>
<li><a href="http://www.csdn.net/article/2015-06-23/2825023">深度解析iOS应用程序的生命周期</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeekBand.iOS-键盘回收]]></title>
    <link href="http://swuzjb.github.io/14585388984918.html"/>
    <updated>2016-03-21T13:41:38+08:00</updated>
    <id>http://swuzjb.github.io/14585388984918.html</id>
    <content type="html"><![CDATA[
<p>我们在程序中经常涉及使用系统键盘录入数据，但是iOS并没有提供一个默认的键盘回收方案。经过查阅网络以及实验，总结以下几种键盘回收方案：</p>

<h2 id="toc_0">触摸空白处回收键盘</h2>

<ol>
<li><p>点击View空白处实现对键盘的隐藏<br/>
覆盖UIViewController的touchBegan方法</p>

<pre><code>-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event{
    //[self.view endEditing:YES];
    [textFiled resignFirstResponder]; 
}
</code></pre></li>
<li><p>创建自定义的触摸手势来实现对键盘的隐藏</p>

<pre><code>-(void)viewDidLoad{  
    [super viewDidLoad];  
    UITapGestureRecognizer *tapGestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(keyboardHide:)];  
    //设置成NO表示当前控件响应后会传播到其他控件上，默认为YES。  
    tapGestureRecognizer.cancelsTouchesInView = NO;  
    //将触摸事件添加到当前view  
    [self.view addGestureRecognizer:tapGestureRecognizer];  
}  

-(void)keyboardHide:(UITapGestureRecognizer*)tap{  
    [textFiled resignFirstResponder];  
}  
</code></pre></li>
<li><p>修改xib中UIView的Custom class为UIControl，UIControl是一些常用控件如UIButton的父类，是UIView的派生类，实现了对触摸和下按的封装。<br/>
    1.首先设置xib中得UIView的Custom class为UIControl<br/>
    2.设置关系事件，将xib中得UIView拖到.m区中设置好事件为Touch Up Inside<br/>
    3、编写隐藏代码：</p>

<pre><code>-(IBAction)touchView:(id)sender {  
    [self.view endEditing:YES];  
}  
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeekBand.iOS-猜城市游戏]]></title>
    <link href="http://swuzjb.github.io/14581131891410.html"/>
    <updated>2016-03-16T15:26:29+08:00</updated>
    <id>http://swuzjb.github.io/14581131891410.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>本游戏是一个用于练手的示例游戏，本文将从最开始的需求分析开始对游戏进行分析和实现</p>
</blockquote>

<h2 id="toc_0">需求分析</h2>

<p>简要需求以及程序原型设计如下图：<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-16-QQ20160316-0@2x.png" alt="程序原型"/><br/>
程序需求的简单描述为：用户根据图片展示，猜测图片展现的是哪一个城市，并将答案输入文本框中，程序对输入内容进行判断，如果答对，增加得分加载下一张图片，如答错，记录尝试次数，超过程序要求，游戏结束。</p>

<p>游戏运行流程：<br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-16-QQ20160316-1@2x.png" alt="游戏运行流程图"/><br/>
补充需求说明：<br/>
1. 输入城市名称时，要求中文简体输入如北京、上海等。<br/>
2. 毎猜对一个城市，得分加10分。<br/>
3. 程序所需图片 采用<code>[UIImage imageNamed:@&quot;&quot;];</code>方法读取;<br/>
4. 城市与图片对应实现采用程序硬编码实现。</p>

<h2 id="toc_1">系统设计</h2>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-16-QQ20160316-2@2x.png" alt="类结构图"/><br/>
具体说明如下：</p>

<ol>
<li><p>ViewController</p>

<p>对使用Interface Builder创建的UI界面提供操作绑定，使代码可以对View控件进行控制。</p></li>
<li><p>City （城市类）</p>

<pre><code>@interface City : NSObject
@property int cityId;//城市ID，根据ID可以加载城市图片
@property NSString* cityName;//城市名称，名称规范如：北京
+(instancetype) initWithCityID:(int)cityId WithCityName:(NSString *)cityName;
@end
</code></pre></li>
<li><p>CityDB（工厂类）<br/>
这是一个工厂类，使用类方法，封装了一些关于城市的操作函数，如返回某城市的图片，和硬编码加载所有城市返回。</p>

<pre><code>@interface CityDB : NSObject
+(UIImage *) getCityImageByCity:(City *)city;
+(NSArray&lt;City *&gt; *) loadAllCity;
@end
</code></pre></li>
<li><p>Level(关卡类) <br/>
毎次随机出现的一个城市，抽象为一个关卡。</p>

<pre><code>@interface Level : NSObject
@property City* city;
@property int time;//当前尝试次数，初始化为0
+(instancetype) initWithCity:(City *)city;
@end
</code></pre></li>
<li><p>Game(游戏控制类)</p>

<pre><code>@interface Game : NSObject
@property BOOL gameOver;
@property int currentScore;
+(instancetype) game;//返回一个游戏对象
-(BOOL) guessCityByName:(NSString *)cityName;//根据用户输入判断猜测是否正确
-(UIImage *) imageForCurrentLevel;//获得当前关卡的城市的图片
-(int) getTryTimes;//本关卡已经尝试的次数

//内部处理所需
//初始化类
-(instancetype) init{
    self = [super init];
    if(self){
        _levels = [NSMutableArray arrayWithCapacity:20];
        _cities = [NSMutableArray arrayWithArray:[CityDB loadAllCity]];
        [self shuffleCities];//随机生成关卡
        _currentLevelIndex = 0;
        _currentScore = 0;
        _gameOver = false;
        _allowTime = 3;
    }
    return  self;
}
//根据CityDB加载的城市列表，随机关卡出现的顺序
-(void) shuffleCities{
    Level* level;
    for(int i = 0; i&lt;[[CityDB loadAllCity] count];i++){
        level = [Level initWithCity:[self getACityRandom]];
        [_levels addObject:level];
    }
}
//从未出现过的City中随机选取一个
-(City *)getACityRandom{
    int i = arc4random() % _cities.count;
    City* city = [_cities objectAtIndex:i];
    [_cities removeObjectAtIndex:i];//把选取中的从待选取列表中移除
    return city;
}
//获得当前的关卡标号
-(Level *)getCurrentLevel{
    return [_levels objectAtIndex:_currentLevelIndex];
}
//前往下一关
-(void) nextLevel{
    _currentLevelIndex++;
    if(_currentLevelIndex &gt;= _levels.count){
        self.gameOver = YES;
    }
}
//根据输入判断是否过关
-(BOOL) guessCityByName:(NSString *)cityName{
    Level* currentLevel =[self getCurrentLevel];
    City* current = currentLevel.city;
    if([cityName isEqualToString:current.cityName]){
        self.currentScore += 10;
        [self nextLevel];
        return YES;
    }else{
      //增加已尝试次数
        currentLevel.time++;
        if (currentLevel.time &gt;= _allowTime) {
            self.gameOver = YES;
        }
    }
    return NO;
}
//返回本关卡剩余可尝试次数
-(int)getTryTimes{
    return _allowTime - [self getCurrentLevel].time;
}
@end
</code></pre></li>
</ol>

<p>本文对游戏的实现，并不是最佳实现，读者可根据自己的理解分析对类进行设计与实现。</p>

<h2 id="toc_2">Demo演示</h2>

<p><img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-16-2016-03-16%2017_34_04.gif" alt="演示1"/><br/>
<img src="http://7xrsyo.com1.z0.glb.clouddn.com/2016-03-16-2016-03-16%2017_48_52.gif" alt="演示2"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeekBand.iOS-UILabel,UIButton,UIImageView,UITextField汇总]]></title>
    <link href="http://swuzjb.github.io/14580567370996.html"/>
    <updated>2016-03-15T23:45:37+08:00</updated>
    <id>http://swuzjb.github.io/14580567370996.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>标题中提到的所有UI控件都可以通过Interface Builder轻松地创建，以下内容仅讨论使用代码建立和修改相关属性</p>
</blockquote>

<h2 id="toc_0">UILabel</h2>

<ol>
<li><p>建立</p>

<pre><code>UILabel *label = [[UILabel alloc]initWithFrame:CGRectMake(x, y, width, height)]; 
</code></pre></li>
<li><p>常用属性</p>

<pre><code> //设置显示文字     
label.text = @&quot;label1&quot;;
//设置字体:粗体，正常的是 SystemFontOfSize     
label.font = [UIFont boldSystemFontOfSize:20];     
//设置文字颜色  
label.textColor = [UIColor orangeColor];   
//设置文字排版方式     
label.textAlignment = UITextAlignmentRight;     
label.textAlignment = UITextAlignmentCenter;     
//设置字体大小适应label宽度     
label.adjustsFontSizeToFitWidth = YES;
//设置label的显示行数  
label.numberOfLines = 2; 
//背景色，也可以设置背景图   
label.backgroundColor=[UIColor clearColor]; //可以去掉背景色   
//设置高亮     
label.highlighted = YES;     
label.highlightedTextColor = [UIColor orangeColor];     
//设置阴影     
label.shadowColor = [UIColor redColor];     
label.shadowOffset = CGSizeMake(1.0,1.0);     
//设置是否能与用户进行交互     
label.userInteractionEnabled = YES;     
//设置label中的文字是否可变，默认值是YES     
label.enabled = NO;     
//设置文字过长时的显示格式     
label.lineBreakMode = UILineBreakModeMiddleTruncation;//截去中间     
//  typedef enum {     
//      UILineBreakModeWordWrap = 0,     
//      UILineBreakModeCharacterWrap,     
//      UILineBreakModeClip,//截去多余部分     
//      UILineBreakModeHeadTruncation,//截去头部     
//      UILineBreakModeTailTruncation,//截去尾部     
//      UILineBreakModeMiddleTruncation,//截去中间     
//  } UILineBreakMode;     
</code></pre></li>
</ol>

<h2 id="toc_1">UIButton</h2>

<ol>
<li><p>建立</p>

<pre><code> //UIButton的定义
UIButton *button=[[UIButton buttonWithType:(UIButtonType);
//typedef enum {
//  UIButtonTypeCustom = 0, 自定义风格
//  UIButtonTypeRoundedRect, 圆角矩形
//  UIButtonTypeDetailDisclosure, 蓝色小箭头按钮，主要做详细说明用
//  UIButtonTypeInfoLight, 亮色感叹号
//  UIButtonTypeInfoDark, 暗色感叹号
//  UIButtonTypeContactAdd, 十字加号按钮
//} UIButtonType;
</code></pre></li>
<li><p>常用方法</p>

<pre><code>//设置frame
button.frame = CGRectMake(20, 20, 280, 40);
[button setFrame:CGRectMake(20,20,50,50)];

//button背景色
button.backgroundColor = [UIColor clearColor];
[button setBackgroundColor:[UIColor blueColor]];

//是否可点击，默认为YES
button.enable = NO;                          
//设置button填充图片和背景图片
[button setImage:(UIImage) forState:UIControlStateNormal];
[button setBackgroundImage:(UIImage)forState:UIControlStateNormal];
//设置button标题和标题颜色
[button1 setTitle:@&quot;点击&quot; forState:UIControlStateNormal];
[button setTitleColor:[UIColor redColor] forState:UIControlStateNormal];

//添加或删除事件处理
[button addTarget:self action:@selector(butClick:)forControlEvents:UIControlEventTouchUpInside];
[button removeTarget:nil action:nil forControlEvents:UIControlEventTouchUpInside];
</code></pre></li>
</ol>

<h2 id="toc_2">UIImageView</h2>

<ol>
<li><p>建立</p>

<pre><code>UIImageView *imageView = [[UIImageView alloc ] init];
//UIImage加载有两种方式
//方案1
UIImage *image = [UIImage imageNamed:@&quot;image_photo&quot;];
//方案2
NSString *filePath=[[NSBundle mainBundle] pathForResource:@&quot;image_photo&quot; ofType:@&quot;jpg&quot;];
UIImage *image=[UIImage imageWithContentsOfFile:filePath];

imageView.image = image;
</code></pre>

<p>方案一：用imageNamed的方式加载时，系统会把图像Cache到内存。如果图像比较大，或者图像比较多，用这种方式会消耗很大的内存，而且释放图像的内存是一件相对来说比较麻烦的事情。例如：如果利用imageNamed的方式加载图像到一个动态数组NSMutableArray，然后将将数组赋予一个UIView的对象的animationImages进行逐帧动画，那么这将会很有可能造成内存泄露。并且释放图像所占据的内存也不会那么简单。但是利用imageNamed加载图像也有自己的优势。对于同一个图像系统只会把它Cache到内存一次，这对于图像的重复利用是非常有优势的。例如：你需要在一个TableView里重复加载同样一个图标，那么用imageNamed加载图像，系统会把那个图标Cache到内存，在Table里每次利用那个图像的时候，只会把图片指针指向同一块内存。这种情况使用imageNamed加载图像就会变得非常有效。<br/>
方案二：就是每次单独加载图片，系统不缓存。使用完后记得释放。</p></li>
<li><p>常用方法</p>

<pre><code> //设置圆角
imageView.layer.masksToBounds = YES;
imageView.layer.cornerRadius = 10;

//设置边框颜色和大小
imageView.layer.borderColor = [UIColor orangeColor].CGColor;
imageView.layer.borderWidth = 2;

//播放一系列图片
UIImage *image1 = [UIImage imageNamed:@&quot;1&quot;];
UIImage *image2 = [UIImage imageNamed:@&quot;2&quot;];
UIImage *image3 = [UIImage imageNamed:@&quot;3&quot;];
NSArray *imagesArray = @[image1,image2,image3];
imageView.animationImages = imagesArray;
// 设定所有的图片在多少秒内播放完毕
imageView.animationDuration = [imagesArray count];
// 重复播放多少遍，0表示无数遍
imageView.animationRepeatCount = 0;
// 开始播放
[imageView startAnimating];

 //为图片添加单击事件：一定要先将userInteractionEnabled置为YES，这样才能响应单击事件
imageView.userInteractionEnabled = YES;
UITapGestureRecognizer *singleTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapImageView:)];
[imageView addGestureRecognizer:singleTap];

//其他设置
imageView.hidden = YES或者NO;    // 隐藏或者显示图片
imageView.alpha =0.5;    // 设置透明度
// 设置高亮时显示的图片
imageView.highlightedImage = (UIImage *)hightlightedImage;
imageView.image = (UIImage *)image; // 设置正常显示的图片
</code></pre></li>
</ol>

<h2 id="toc_3">UITextField</h2>

<ol>
<li><p>建立</p>

<pre><code>UITextField* textField = [[UITextField alloc] initWithFrame:CGRectMake(x, y, width, height)];
</code></pre></li>
<li><p>常用方法</p>

<pre><code>textField setBorderStyle:UITextBorderStyleRoundedRect]; //外框类型
textField.placeholder = @&quot;password&quot;; //默认显示的字 
textField.secureTextEntry = YES; //密码 

textField.autocorrectionType = UITextAutocorrectionType; //设置是否自动纠错
typedef enum {
    UITextAutocorrectionTypeDefault, //默认
    UITextAutocorrectionTypeNo, 　//不自动纠错
    UITextAutocorrectionTypeYes,　//自动纠错
}UITextAutocorrectionType;

textField.clearButtonMode = UITextFieldViewMode; //编辑时会出现个修改X
typedef enum {
    UITextFieldViewModeNever,　//重不出现
    UITextFieldViewModeWhileEditing, //编辑时出现
    UITextFieldViewModeUnlessEditing,　//除了编辑外都出现
    UITextFieldViewModeAlways 　//一直出现
}UITextFieldViewMode; 

//可以在UITextField使用下面方法，按return键返回
-(IBAction) textFieldDone:(id) sender
{
 [textFieldName resignFirstResponder]; 
}
//链接TextField控件的&quot;Did end on exit&quot;

//再次编辑就清空
textField.clearsOnBeginEditing = YES; 

//设置键盘样式
textField.keyboardType = UIKeyboardType;
typedef enum {
        UIKeyboardTypeDefault,     　//默认键盘，支持所有字符         
        UIKeyboardTypeASCIICapable,　//支持ASCII的默认键盘
        UIKeyboardTypeNumbersAndPunctuation,　//标准电话键盘，支持＋＊＃字符
        UIKeyboardTypeURL,            //URL键盘，支持.com按钮 只支持URL字符
        UIKeyboardTypeNumberPad,       //数字键盘
        UIKeyboardTypePhonePad,　 　//电话键盘
        UIKeyboardTypeNamePhonePad, 　//电话键盘，也支持输入人名
        UIKeyboardTypeEmailAddress, 　//用于输入电子邮件地址的键盘     
        UIKeyboardTypeDecimalPad,   　//数字键盘有数字和小数点
        UIKeyboardTypeTwitter,      　//优化的键盘，方便输入@、#字符
        UIKeyboardTypeAlphabet = UIKeyboardTypeASCIICapable, 
}UIKeyboardType;

//return键样式
text.returnKeyType =UIReturnKeyType;
typedef enum {
    UIReturnKeyDefault, 默认 灰色按钮，标有Return
    UIReturnKeyGo,    　标有Go的蓝色按钮
    UIReturnKeyGoogle,标有Google的蓝色按钮，用语搜索
    UIReturnKeyJoin,标有Join的蓝色按钮
    UIReturnKeyNext,标有Next的蓝色按钮
    UIReturnKeyRoute,标有Route的蓝色按钮
    UIReturnKeySearch,标有Search的蓝色按钮
    UIReturnKeySend,标有Send的蓝色按钮
    UIReturnKeyYahoo,标有Yahoo的蓝色按钮
    UIReturnKeyYahoo,标有Yahoo的蓝色按钮
    UIReturnKeyEmergencyCall, 紧急呼叫按钮
} UIReturnKeyType;

</code></pre></li>
</ol>

<h2 id="toc_4">To ALL</h2>

<p>把上述View加入页面[self.view addSubview:(UIView)]需注意两点：</p>

<ol>
<li>这个方法会retain一次view，并且设置它的下一个响应者是receiver，即它的新的父视图。</li>
<li>每一个视图只能有唯一的一个父视图。如果当前操作视图已经有另外的一个父视图，则addsubview的操作会把它先从上一个父视图中移除（包括响应者链），再加到新的父视图上面。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前笔记汇总]]></title>
    <link href="http://swuzjb.github.io/14578438756442.html"/>
    <updated>2016-03-13T12:37:55+08:00</updated>
    <id>http://swuzjb.github.io/14578438756442.html</id>
    <content type="html"><![CDATA[
<p>前面学习的笔记都在简书上完成，但是根据同班的isisYu大神的笔记展示发现，这个方法才是神技。感谢isisYu大神推荐的MWeb，Github page,这样的神器。<br/>
但是由于自己比较懒，前面的博文就不一一复制粘贴过来了。<br/>
给大家留个传送门。<br/>
<a href="http://www.jianshu.com/p/c14efdb79779">第一课笔记</a><br/>
<a href="http://www.jianshu.com/p/cc828bbd3432">第二课笔记-类与对象</a><br/>
<a href="http://www.jianshu.com/p/62afb4f745d9">GeekBand-OC类型成员</a><br/>
<a href="http://www.jianshu.com/p/f2ccf4c422bc">GeekBand-OC继承与多态</a><br/>
<a href="http://www.jianshu.com/p/14f832bac76c">GeekBand-OC中的字符串</a><br/>
<a href="http://www.jianshu.com/p/b4263fc2cb16">GeekBand-OC中的集合类型</a><br/>
<a href="http://www.jianshu.com/p/68f2ed8ef988">GeekBand-OC中的ARC</a></p>

]]></content>
  </entry>
  
</feed>
